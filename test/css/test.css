@charset "UTF-8";
/* Susy Tests */
/* ========== */
html {
  font-size: 100%;
  line-height: 1.5em;
  font-family: sans-serif; }

body {
  padding: 1; }

h1 {
  font-weight: bold; }

[role="banner"] {
  font-size: 1.5rem;
  line-height: 2rem; }

.results {
  background-color: rgba(255, 0, 0, 0.25);
  border: 1px solid red;
  margin-bottom: 1rem;
  margin-top: 1rem;
  padding-bottom: 1rem;
  padding-top: 1rem; }
  .results:before {
    content: 'Unit Tests: ';
    font-weight: bold; }
  .results:before, .results:after {
    display: inline; }

.test-module {
  border-bottom: 6px dotted;
  padding-bottom: 1rem;
  margin-bottom: .5rem; }
  .test-module:last-of-type {
    padding-bottom: 0;
    border: 0; }
  .test-module > h1 {
    font-size: 1.5rem;
    line-height: 2rem;
    margin-bottom: .5rem; }

[class^="test__"] {
  margin-bottom: .5rem; }
  [class^="test__"] h1 {
    padding: .25rem .5rem;
    background: #666;
    color: #eee;
    font-weight: normal;
    font-family: monospace, sans-serif; }

[class^="assert__"] {
  margin-bottom: .5rem;
  text-align: center; }
  [class^="assert__"] div {
    background: rgba(255, 255, 255, 0.25);
    outline: 1px solid rgba(255, 0, 0, 0.25);
    outline-offset: -1px; }
  [class^="assert__"] .test, [class^="assert__"] .expect {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    font-size: .75rem;
    margin-bottom: .5rem; }
  [class^="assert__"] .test {
    outline-color: red; }
  [class^="assert__"] .expect {
    outline-color: green; }
  [class^="assert__"] .spacer {
    height: 2.5rem;
    outline: 1px solid rgba(68, 68, 68, 0.25);
    background: rgba(68, 68, 68, 0.125); }

/* # Module: Map Helpers */
/* --------------------- */
/* Test: truncate-list */
/*   ✔ Returns a list truncated to the given length. */
/*  */
/* Test: deep-get */
/*   ✔ Returns value of deep key. */
/*  */
/* Test: deep-set */
/*   ✔ Returns map with deep value adjusted. */
/*   ✔ Set deep value even in new key path. */
/*  */
/* Test: deep-merge */
/*   ✔ Should merge nested maps */
/*  */
/* Test: deep-has-key */
/*   ✔ Returns true for existing deep key. */
/*   ✔ Returns false for non-existing deep key. */
/*  */
/*  */
/* # Module: General Settings */
/* -------------------------- */
/* Test: susy-defaults */
/*   ✔ Assert that there is no "test" default. */
/*   ✔ Assert that we have added a "test" default. */
/*  */
/* Test: [mixin] susy-set */
/*   ✔ Changes the global value for a setting. */
/*  */
/* Test: [function] susy-get */
/*   ✔ susy-get should be the same whether pre-parsed or not */
/*   ✔ Returns local grid setting when available. */
/*   ✔ Returns global default grid setting, when local is missing. */
/*   ✔ Returns null gutter setting without falling back on default. */
/*   ✔ Returns deep grid setting when available. */
/*   ✔ Returns null when deep grid setting is not available. */
/*  */
/*  */
/* # Module: Grid Validation */
/* ------------------------- */
/* Test: [mixin] valid-columns */
/*   ✔ A unitless number is a valid setting for columns. */
/*   ✔ A list of unitless numbers is a valid setting for columns. */
/*   ✔ A length is not a valid setting for columns */
/*   ✔ A list including strings is not a valid setting for columns */
/*  */
/* Test: [mixin] valid-gutters */
/*   ✔ A unitless number is a valid setting for gutters. */
/*   ✔ A length is not a valid setting for gutters. */
/*  */
/*  */
/* # Module: Column Math */
/* --------------------- */
/* Test: [function] is-symmetrical() */
/*   ✔ Number is parsed as symmetrical grid. */
/*   ✔ List is parsed as asymmetrical grid. */
/*   ✔ Single-item list is parsed as asymmetrical grid. */
/*  */
/* Test: [function] susy-count() */
/*   ✔ Symmetrical grid-count is equal to columns setting. */
/*   ✔ Asymmetrical grid-count is equal to columns list length. */
/*  */
/* Test: [function] susy-sum() — symmetrical */
/*   ✔ Symmetrical sum properly adds columns and gutters. */
/*   ✔ Narrow sum properly adds columns and gutters. */
/*   ✔ Wide sum includes an extra gutter. */
/*   ✔ Wider sum includes two extra gutters. */
/*  */
/* Test: [function] susy-sum() — asymmetrical */
/*   ✔ Asymmetrical sum properly adds columns and gutters. */
/*   ✔ Wide sum includes an extra gutter. */
/*   ✔ Wider sum includes two extra gutters. */
/*  */
/* Test: [function] susy-slice() */
/*   ✔ Subset is equal to the span. */
/*   ✔ Subset is an extracted list of span length, starting at location. */
/*   ✔ Asymmetrical context without location returns first-position subset. */
/*  */
/* Test: [function] susy() */
/*   ✔ Symmetrical column-span-sum is equal to column-sum of span. */
/*   ✔ Asymmetrical column-span-sum fetches subset before calculating sum. */
/*  */
/*  */
/* # Module: Language Settings */
/* --------------------------- */
/* Test: [function] parse-grid */
/*   ✔ [parse-grid: map] Returns the correct columns. */
/*   ✔ [parse-grid: #1] Returns the correct columns. */
/*   ✔ [parse-grid: #1] Returns the correct gutters. */
/*   ✔ [parse-grid: #1] Returns the correct container. */
/*   ✔ [parse-grid: #1] Returns the correct math. */
/*   ✔ [parse-grid: #1] Returns the correct output. */
/*   ✔ [parse-grid: #1] Returns the correct container-position. */
/*   ✔ [parse-grid: #1] Returns the correct flow. */
/*   ✔ [parse-grid: #1] Returns the correct gutter-position. */
/*   ✔ [parse-grid: #1 » debug] Returns the correct image. */
/*   ✔ [parse-grid: #1 » debug] Returns the correct output. */
/*   ✔ [parse-grid: #2] Returns the correct columns. */
/*   ✔ [parse-grid: #2] Returns the correct gutters. */
/*   ✔ [parse-grid: #2] Returns the correct container. */
/*   ✔ [parse-grid: #2] Returns the correct column-width. */
/*   ✔ [parse-grid: #2] Returns the correct math. */
/*   ✔ [parse-grid: #2] Returns the correct output. */
/*   ✔ [parse-grid: #2] Returns the correct container-position. */
/*   ✔ [parse-grid: #2] Returns the correct flow. */
/*   ✔ [parse-grid: #2] Returns the correct gutter-position. */
/*   ✔ [parse-grid: #2] Returns the correct box-sizing. */
/*   ✔ [parse-grid: #2 » debug] Returns the correct image. */
/*   ✔ [parse-grid: #3] Returns the correct container-position. */
/*   ✔ [parse-grid: #3] Returns the correct gutter-position. */
/*   ✔ [parse-grid: #3] Returns the correct box-sizing. */
/*   ✔ [parse-grid: #3 » debug] Returns the correct image. */
/*   ✔ [parse-grid: #4] Returns the correct columns. */
/*   ✔ [parse-grid: #4] Returns the correct gutters. */
/*   ✔ [parse-grid: #4] Returns the correct gutter-position. */
/*   ✔ [parse-grid: #4 » debug] Returns the correct image. */
/*   ✔ [parse-grid: #5] Returns the correct gutter-position. */
/*  */
/* Test: [function] parse-span */
/*   ✔ [parse-span: #1] Returns the correct span. */
/*   ✔ [parse-span: #1] Returns the correct edge. */
/*   ✔ [parse-span: #1] Returns the correct columns. */
/*   ✔ [parse-span: #1] Returns the correct gutters. */
/*   ✔ [parse-span: #1] Returns the correct output. */
/*   ✔ [parse-span: #1] Returns the correct math. */
/*   ✔ [parse-span: #1] Returns the correct spread. */
/*   ✔ [parse-span: #1] Returns the correct flow. */
/*   ✔ [parse-span: #1] Returns the correct gutter-position. */
/*   ✔ [parse-span: #2] Returns the correct span. */
/*   ✔ [parse-span: #2] Returns the correct edge. */
/*   ✔ [parse-span: #2] Returns the correct columns. */
/*   ✔ [parse-span: #2] Returns the correct gutters. */
/*   ✔ [parse-span: #2] Returns the correct column-width. */
/*   ✔ [parse-span: #2] Returns the correct output. */
/*   ✔ [parse-span: #2] Returns the correct math. */
/*   ✔ [parse-span: #2] Returns the correct flow. */
/*   ✔ [parse-span: #2] Returns the correct gutter-position. */
/*   ✔ [parse-span: #2] Returns the correct role. */
/*   ✔ [parse-span: #3] Returns the correct span. */
/*   ✔ [parse-span: #3] Returns the correct edge. */
/*   ✔ [parse-span: #3] Returns the correct columns. */
/*   ✔ [parse-span: #3] Returns the correct column-width. */
/*   ✔ [parse-span: #3] Returns the correct gutter-position. */
/*   ✔ [parse-span: #3] Returns the correct spread. */
/*   ✔ [parse-span: #4] Returns the correct span. */
/*   ✔ [parse-span: #4] Returns the correct edge. */
/*   ✔ [parse-span: #4] Returns the correct columns. */
/*   ✔ [parse-span: #4] Returns the correct gutters. */
/*   ✔ [parse-span: #4] Returns the correct gutter-position. */
/*   ✔ [parse-span: #5] Returns the correct span. */
/*   ✔ [parse-span: #5] Returns the correct location. */
/*   ✔ [parse-span: #5] Returns the correct gutter-position. */
/*   ✔ [parse-span: #5] Returns the correct gutter-override. */
/*   ✔ [parse-span: #5] Returns the correct clear. */
/*   ✔ [parse-span: #6] Returns the correct span. */
/*   ✔ [parse-span: #6] Returns the correct gutter-override. */
/*   ✔ [parse-span: #6] Returns the correct clear. */
/*   ✔ [parse-span: #7] Returns the correct span. */
/*   ✔ [parse-span: #7] Returns the correct edge. */
/*   ✔ [parse-span: #7] Returns the correct columns. */
/*   ✔ [parse-span: #7] Returns the correct gutters. */
/*   ✔ [parse-span: #7] Returns the correct column-width. */
/*   ✔ [parse-span: #7] Returns the correct gutter-position. */
/*  */
/* Test: [function] parse-gutters */
/*   ✔ [context-only] Returns the correct columns. */
/*   ✔ [context-only] Returns the correct gutters. */
/*   ✔ [context-only] Returns the correct gutter-position. */
/*   ✔ [context-only [no "of"]] Returns the correct columns. */
/*   ✔ [context-only [no "of"]] Returns the correct gutters. */
/*   ✔ [context-only [no "of"]] Returns the correct gutter-position. */
/*   ✔ [explicit-only] Returns the correct gutter-override. */
/*   ✔ [explicit] Returns the correct columns. */
/*   ✔ [explicit] Returns the correct gutters. */
/*   ✔ [explicit] Returns the correct gutter-position. */
/*   ✔ [explicit] Returns the correct gutter-override. */
/*  */
/*  */
/* # Module: Grids Syntax */
/* ---------------------- */
/* Test: [mixin] layout */
/*   ✔ New container setting should be "960px" */
/*   ✔ New columns setting should still be the default */
/*   ✔ New box-sizing should be "border-box" */
/*   ✔ New gutter-position should be "inside" */
/*   ✔ New container setting should remain "960px" */
/*   ✔ New columns setting should be "12" */
/*   ✔ New box-sizing should remain "border-box" */
/*  */
/* Test: [mixin] with-layout */
/*   ✔ Start with 4 columns, before with-layout */
/*   ✔ Start with 960px container, before with-layout */
/*   ✔ Switch to 12 columns, inside with-layout */
/*   ✔ Switch to auto container, inside with-layout */
/*   ✔ End with 4 columns, after with-layout */
/*   ✔ End with 960px container, after with-layout */
/*  */
/* Test: [function] layout */
/*   ✔ Returns a parsed grid map based on shorthand syntax */
/*  */
/* Test: [function] _get-layout */
/*   ✔ Returns layout merged with global settings */
/*   ✔ Returns layout, without global settings */
/*  */
/*  */
/* # Module: Global Box-Sizing Syntax */
/* ---------------------------------- */
/* - [mixin] global-box-sizing */
.test__global-box-sizing .assert__global-box-sizing {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__global-box-sizing .assert__global-box-sizing .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  width: 60%;
  margin: 0 auto; }

/* "Nested items should use border-box model." */
.test__global-box-sizing .assert__global-box-sizing:before {
  content: "Nested items should use border-box model.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__global-box-sizing .assert__global-box-sizing .test *, .test__global-box-sizing .assert__global-box-sizing .test *:before, .test__global-box-sizing .assert__global-box-sizing .test *:after {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__global-box-sizing .assert__global-box-sizing .expect *, .test__global-box-sizing .assert__global-box-sizing .expect *:before, .test__global-box-sizing .assert__global-box-sizing .expect *:after {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

.test__global-box-sizing .assert__global-box-sizing {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__global-box-sizing .assert__global-box-sizing .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  width: 60%;
  margin: 0 auto; }

/* "Nested items should inherit the border-box model from the html element." */
.test__global-box-sizing .assert__global-box-sizing:before {
  content: "Nested items should inherit the border-box model from the html element.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
html {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

*, *:before, *:after {
  box-sizing: inherit; }
html {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

*, *:before, *:after {
  box-sizing: inherit; }

/* - [mixin] border-box-sizing */
.test__border-box-sizing .assert__border-box-sizing {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__border-box-sizing .assert__border-box-sizing .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  width: 60%;
  margin: 0 auto; }

/* "Nested items should use border-box model." */
.test__border-box-sizing .assert__border-box-sizing:before {
  content: "Nested items should use border-box model.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__border-box-sizing .assert__border-box-sizing .test *, .test__border-box-sizing .assert__border-box-sizing .test *:before, .test__border-box-sizing .assert__border-box-sizing .test *:after {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__border-box-sizing .assert__border-box-sizing .expect *, .test__border-box-sizing .assert__border-box-sizing .expect *:before, .test__border-box-sizing .assert__border-box-sizing .expect *:after {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

.test__border-box-sizing .assert__border-box-sizing {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__border-box-sizing .assert__border-box-sizing .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  width: 60%;
  margin: 0 auto; }

/* "Nested items should inherit the border-box model from the html element." */
.test__border-box-sizing .assert__border-box-sizing:before {
  content: "Nested items should inherit the border-box model from the html element.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
html {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

*, *:before, *:after {
  box-sizing: inherit; }
html {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

*, *:before, *:after {
  box-sizing: inherit; }

/* Test: update-box-model */
/*   ✔ Box models are different before we test. */
/*   ✔ Changes the global-box-sizing. */
/*  */
/*  */
/* # Module: Shared Context Language */
/* --------------------------------- */
/* Test: [function] nested */
/*   ✔ Symmetrical nested context should be equal to the given span */
/*   ✔ Symmetrical nested context should be equal no matter what the location */
/*   ✔ Nested "3 of (1 1 2 3 5 8) at 2" should be "(1 2 3)" */
/*  */
/* Test: [mixin] nested */
/*   ✔ Symmetrical nested $columns should be equal to nesting span */
/*   ✔ Last 4 of "(1 1 2 3 5 8 13)" should be "(3 5 8 13)" */
/*  */
/*  */
/* # Module: Background Syntax */
/* --------------------------- */
/* - [mixin] background-grid */
.test__background-grid .assert__outside {
  background: rgba(204, 204, 255, 0.5); }

/* "Items should have a 7-column grid with outside gutters." */
.test__background-grid .assert__outside:before {
  content: "Items should have a 7-column grid with outside gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__background-grid .assert__outside .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__background-grid .assert__outside .expect {
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 66.66667%, transparent 66.66667%);
  background-size: 15%;
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top; }

.test__background-grid .assert__split {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Items should have a 8-column grid with split gutters." */
.test__background-grid .assert__split:before {
  content: "Items should have a 8-column grid with split gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__background-grid .assert__split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__background-grid .assert__split .expect {
  background-image: linear-gradient(to right, transparent 10%, rgba(102, 102, 255, 0.25) 10%, rgba(179, 179, 255, 0.25) 90%, transparent 90%);
  background-size: 12.5%;
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top; }

.test__background-grid .assert__inside {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Items should have a 8-column grid with inside gutters." */
.test__background-grid .assert__inside:before {
  content: "Items should have a 8-column grid with inside gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__background-grid .assert__inside .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__background-grid .assert__inside .expect {
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25));
  background-size: 12.5%;
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top; }

.test__background-grid .assert__asym-outside {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Items should have a (1 2 3 2 1)-column grid with outside gutters." */
.test__background-grid .assert__asym-outside:before {
  content: "Items should have a (1 2 3 2 1)-column grid with outside gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__background-grid .assert__asym-outside .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__background-grid .assert__asym-outside .expect {
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 9.09091%, transparent 9.09091%, transparent 13.63636%, rgba(102, 102, 255, 0.25) 13.63636%, rgba(179, 179, 255, 0.25) 31.81818%, transparent 31.81818%, transparent 36.36364%, rgba(102, 102, 255, 0.25) 36.36364%, rgba(179, 179, 255, 0.25) 63.63636%, transparent 63.63636%, transparent 68.18182%, rgba(102, 102, 255, 0.25) 68.18182%, rgba(179, 179, 255, 0.25) 86.36364%, transparent 86.36364%, transparent 90.90909%, rgba(102, 102, 255, 0.25) 90.90909%, rgba(179, 179, 255, 0.25));
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top; }

.test__background-grid .assert__asym-split {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Items should have a (1 2 3 3)-column grid with split gutters." */
.test__background-grid .assert__asym-split:before {
  content: "Items should have a (1 2 3 3)-column grid with split gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__background-grid .assert__asym-split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__background-grid .assert__asym-split .expect {
  background-image: linear-gradient(to right, transparent 1.25%, rgba(102, 102, 255, 0.25) 1.25%, rgba(179, 179, 255, 0.25) 11.25%, transparent 11.25%, transparent 13.75%, rgba(102, 102, 255, 0.25) 13.75%, rgba(179, 179, 255, 0.25) 33.75%, transparent 33.75%, transparent 36.25%, rgba(102, 102, 255, 0.25) 36.25%, rgba(179, 179, 255, 0.25) 66.25%, transparent 66.25%, transparent 68.75%, rgba(102, 102, 255, 0.25) 68.75%, rgba(179, 179, 255, 0.25) 98.75%, transparent 98.75%);
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top; }

.test__background-grid .assert__asym-inside {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Items should have a (1 2 3 3)-column grid with inside gutters." */
.test__background-grid .assert__asym-inside:before {
  content: "Items should have a (1 2 3 3)-column grid with inside gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__background-grid .assert__asym-inside .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__background-grid .assert__asym-inside .expect {
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 12.5%, rgba(102, 102, 255, 0.25) 12.5%, rgba(179, 179, 255, 0.25) 35%, rgba(102, 102, 255, 0.25) 35%, rgba(179, 179, 255, 0.25) 67.5%, rgba(102, 102, 255, 0.25) 67.5%, rgba(179, 179, 255, 0.25));
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top; }

/* Test: [function] get-background-sym */
/*   ✔ Returns the correct columns gradient for an inside grid. */
/*   ✔ Returns the correct background size for a fluid grid. */
/*   ✔ Returns the correct columns gradient for an outside grid. */
/*   ✔ Returns the correct background size for a static grid. */
/*   ✔ Returns the correct columns gradient for a split-gutters grid. */
/*   ✔ Returns the correct background size for a split-gutters grid. */
/*  */
/* Test: [function] get-asym-inside */
/*   ✔ Returns column gradient stops for asymmetric inside grid. */
/*  */
/* Test: [function] get-asym-split */
/*   ✔ Returns column gradient stops for asymmetric split grid. */
/*  */
/* Test: [function] get-asym-outside */
/*   ✔ Returns column gradient stops for asymmetric outside grid. */
/*  */
/* Test: [function] get-background-asym */
/*   ✔ Returns column background for asymmetric outside grid. */
/*   ✔ Returns column background for asymmetric inside grid. */
/*  */
/* Test: [function] get-background */
/*   ✔ No values for a hidden grid (hide). */
/*   ✔ Return key/values for columns. */
/*   ✔ Only show baseline if $base-line-height exists. */
/*   ✔ Only show baseline if $base-line-height has units. */
/*   ✔ [Return key/values for baseline. » image] Returns the correct baseline. */
/*   ✔ [Return key/values for baseline.] Returns the correct size. */
/*   ✔ [Return key/values for baseline.] Returns the correct flow. */
/*   ✔ [Return key/values for both baseline and columns. » image] Returns the correct columns. */
/*   ✔ [Return key/values for both baseline and columns. » image] Returns the correct baseline. */
/*   ✔ [Return key/values for both baseline and columns.] Returns the correct size. */
/*   ✔ [Return key/values for both baseline and columns.] Returns the correct clip. */
/*   ✔ [Return key/values for both baseline and columns.] Returns the correct flow. */
/*  */
/* Test: [function] get-debug */
/*   ✔ Returns proper default debug value. */
/*   ✔ Returns proper user-set debug value. */
/*  */
/*  */
/* # Module: Container Syntax */
/* -------------------------- */
/* - [mixin] container */
.test__container .assert__default-box {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Containers should have 80% max-width and show a 7 .5 grid." */
.test__container .assert__default-box:before {
  content: "Containers should have 80% max-width and show a 7 .5 grid.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__container .assert__default-box .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__container .assert__default-box .test:after {
    content: " ";
    display: block;
    clear: both; }
.test__container .assert__default-box .expect {
  max-width: 80%;
  margin-left: auto;
  margin-right: auto;
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 66.66667%, transparent 66.66667%);
  background-size: 15%;
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top; }
  .test__container .assert__default-box .expect:after {
    content: " ";
    display: block;
    clear: both; }

.test__container .assert__border-box {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Containers should have 40em max-width, border-box-sizing, and show a (1 2 3 2 1) (4em 2em) grid, flush left." */
.test__container .assert__border-box:before {
  content: "Containers should have 40em max-width, border-box-sizing, and show a (1 2 3 2 1) (4em 2em) grid, flush left.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__container .assert__border-box .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__container .assert__border-box .test:after {
    content: " ";
    display: block;
    clear: both; }
.test__container .assert__border-box .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  max-width: 40em;
  margin-left: 0;
  margin-right: auto;
  background-image: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 12.5%, rgba(102, 102, 255, 0.25) 12.5%, rgba(179, 179, 255, 0.25) 32.5%, transparent 32.5%, transparent 35%, rgba(102, 102, 255, 0.25) 35%, rgba(179, 179, 255, 0.25) 65%, transparent 65%, transparent 67.5%, rgba(102, 102, 255, 0.25) 67.5%, rgba(179, 179, 255, 0.25) 87.5%, transparent 87.5%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
  background-origin: content-box;
  background-clip: content-box;
  background-position: left top; }
  .test__container .assert__border-box .expect:after {
    content: " ";
    display: block;
    clear: both; }

/* Test: [function] container */
/*   ✔ The container-width of "960px 12 0.25 left static" should be 960px */
/*   ✔ The container-width of "12 6em 1em" should be 83em */
/*   ✔ The container-width of "1 3 4 2 1 0.25" should be 100% */
/*   ✔ Omitted grid-widths should still be respected. */
/*   ✔ Auto container-width should override existing grid. */
/*  */
/* Test: [function] get-container-width */
/*   ✔ An explicit container width should be returned without changes. */
/*   ✔ An empty container value should return 100%. */
/*   ✔ An auto container with no specified widths should return 100%. */
/*   ✔ Returns narrow container for outside gutters. */
/*   ✔ Returns wide container for inside gutters. */
/*   ✔ Returns wide container for split gutters. */
/*  */
/* Test: [function] parse-container-position() */
/*   ✔ A null value should return null for both sides. */
/*   ✔ A 2-part list is already a valid container position. */
/*   ✔ A left-aligned container should have 0 margin-left, and auto right. */
/*   ✔ A right-aligned container should have 0 margin-right, and auto left. */
/*   ✔ A centered container should have auto left and right margins. */
/*   ✔ A number should be used for both left and right container margins. */
/*   ✔ A string should be used for both left and right container margins. */
/*  */
/*  */
/* # Module: Span Syntax */
/* --------------------- */
/* - [mixin] span */
.test__span .assert__default {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__span .assert__default:after {
    content: " ";
    display: block;
    clear: both; }

.test__span .assert__default .test, .test__span .assert__default .expect {
  clear: both; }
  .test__span .assert__default .test:after, .test__span .assert__default .expect:after {
    content: " ";
    display: block;
    clear: both; }
  .test__span .assert__default .test .inner, .test__span .assert__default .expect .inner {
    background: rgba(255, 255, 0, 0.25); }

/* "Span should set width (75%), float (left), and gutter (5% margin-right)" */
.test__span .assert__default:before {
  content: "Span should set width (75%), float (left), and gutter (5% margin-right)";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__span .assert__default .test {
  -susy-span: 5 content-box inspect;
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__span .assert__default .test .inner {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
.test__span .assert__default .expect {
  -susy-span: 5 content-box inspect;
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  width: 70%;
  float: left;
  margin-right: 5%; }
  .test__span .assert__default .expect .inner {
    width: 35.71429%;
    float: left;
    margin-right: 7.14286%; }

.test__span .assert__inside {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__span .assert__inside:after {
    content: " ";
    display: block;
    clear: both; }

.test__span .assert__inside .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  clear: left; }

/* "Span should set width, float, clear, and inside gutter" */
.test__span .assert__inside:before {
  content: "Span should set width, float, clear, and inside gutter";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__span .assert__inside *, .test__span .assert__inside *:before, .test__span .assert__inside *:after {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__span .assert__inside .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__span .assert__inside .expect {
  clear: both;
  width: 62.5%;
  float: left;
  padding-left: 1.25%;
  padding-right: 1.25%; }

.test__span .assert__explicit {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__span .assert__explicit:after {
    content: " ";
    display: block;
    clear: both; }

.test__span .assert__explicit .test, .test__span .assert__explicit .expect {
  clear: both; }

/* "Span should set width, float, inside gutter, and border-box" */
.test__span .assert__explicit:before {
  content: "Span should set width, float, inside gutter, and border-box";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__span .assert__explicit .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__span .assert__explicit .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  width: 80%;
  float: left;
  padding-left: 1.25%;
  padding-right: 1.25%; }

/* Test: [mixin] span */
/*  */
/* Test: [function] span */
/*   ✔ Span function returns expected width value. */
/*  */
/* Test: [function] span-math */
/*   ✔ Returns correct span-math with outside gutters. */
/*   ✔ Returns correct span-math gutters with explicit span. */
/*   ✔ Returns correct span-math with split gutters. */
/*   ✔ Returns correct padding for inside gutters. */
/*   ✔ The padding for any "inside nest" should be "null null" */
/*   ✔ Split nest use outer width, and no margins. */
/*   ✔ Returns correction margins for isolation. */
/*   ✔ Removes correct margins when last. */
/*   ✔ Sets the correct float when last. */
/*   ✔ No special margins for after first. */
/*   ✔ Removes correct margins when full. */
/*   ✔ Sets the correct float when full. */
/*   ✔ Removes correct margins when first. */
/*   ✔ No special margins for before last. */
/*  */
/* Test: [function] get-span-width */
/*   ✔ Explicit width is returned without changes. */
/*   ✔ Returns correct fluid span width. */
/*   ✔ Returns correct full span width. */
/*   ✔ Returns correct width with inside gutters. */
/*   ✔ Returns correct width with no-gutters. */
/*   ✔ Returns correct width with split gutters. */
/*   ✔ Returns the correct static span width. */
/*   ✔ Returns the correct static width with inside gutters. */
/*   ✔ Returns the correct wide span width. */
/*   ✔ Returns the correct wider span width. */
/*   ✔ Returns the correct narrow inside span width. */
/*   ✔ Returns the correct narrow inside span width. */
/*  */
/*  */
/* # Module: Gutter Syntax */
/* ----------------------- */
/* - [mixin] gutters */
.test__gutters .assert__auto {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gutters .assert__auto:after {
    content: " ";
    display: block;
    clear: both; }

/* "Item should have 2.5% margin-gutters added before and after" */
.test__gutters .assert__auto:before {
  content: "Item should have 2.5% margin-gutters added before and after";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__gutters .assert__auto .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__gutters .assert__auto .expect {
  margin-left: 1.25%;
  margin-right: 1.25%; }

.test__gutters .assert__inside-static {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gutters .assert__inside-static:after {
    content: " ";
    display: block;
    clear: both; }

/* "Item should have 1em padding-gutters added before and after" */
.test__gutters .assert__inside-static:before {
  content: "Item should have 1em padding-gutters added before and after";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__gutters .assert__inside-static .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__gutters .assert__inside-static .expect {
  padding-left: 1em;
  padding-right: 1em; }

.test__gutters .assert__explicit {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gutters .assert__explicit:after {
    content: " ";
    display: block;
    clear: both; }

/* "Item should have 5em padding-gutters added before and after" */
.test__gutters .assert__explicit:before {
  content: "Item should have 5em padding-gutters added before and after";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__gutters .assert__explicit .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__gutters .assert__explicit .expect {
  padding-left: 5em;
  padding-right: 5em; }

/* Test: [function] gutter */
/*   ✔ Returns correct outside gutters. */
/*   ✔ Returns correct inside gutters. */
/*  */
/* Test: [function] get-gutter-width */
/*   ✔ Returns correct explicit gutter width. */
/*   ✔ Returns correct static gutter width. */
/*   ✔ Returns correct fluid gutter width. */
/*   ✔ Returns correct inside gutter width. */
/*   ✔ Returns correct split gutter width. */
/*   ✔ Returns correct split no-gutters width. */
/*   ✔ Returns correct null gutters width. */
/*   ✔ Returns null width for 0-gutters. */
/*   ✔ Returns correct override width for 0 gutters. */
/*  */
/* Test: [function] get-gutters */
/*   ✔ Returns correct explicit before gutter. */
/*   ✔ Returns correct after gutters. */
/*   ✔ Split gutters should be divided, even when explicit. */
/*  */
/* Test: [function] is-inside */
/*   ✔ After gutters are not inside. */
/*   ✔ Inside-static gutters are inside. */
/*  */
/* Test: [function] is-split */
/*   ✔ After gutters are not split. */
/*   ✔ Inside gutters are split. */
/*  */
/* Test: [function] gutter-math */
/*   ✔ Returns static gutters when math is static. */
/*   ✔ Returns static gutters when gutter-position inside-static. */
/*  */
/*  */
/* # Module: Isolation Syntax */
/* -------------------------- */
/* - [mixin] isolate */
.test__isolate .assert__isolate {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__isolate .assert__isolate:after {
    content: " ";
    display: block;
    clear: both; }

.test__isolate .assert__isolate .test, .test__isolate .assert__isolate .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  clear: both; }

/* "Item should be isolated in the last 2 columns" */
.test__isolate .assert__isolate:before {
  content: "Item should be isolated in the last 2 columns";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__isolate .assert__isolate .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__isolate .assert__isolate .expect {
  float: left;
  margin-left: 75%;
  margin-right: -100%; }

/* Test: [function] isolate */
/*   ✔ Explicit value is passed through as isolation offset. */
/*   ✔ Index span is calculated as isolation location. */
/*  */
/* Test: [function] get-isolation */
/*   ✔ Explicit isolation placements should be passed back unchanged. */
/*   ✔ Isolation in the first column doesnt require any prefixed margins. */
/*   ✔ Isolation for "last 2 of 7 (4em 2em) static" (5 wide) should be 30em. */
/*   ✔ Returns isolation value for first split element. */
/*   ✔ Returns isolation value for first split element. */
/*  */
/*  */
/* # Module: Gallery Syntax */
/* ------------------------ */
/* - [mixin] gallery */
.test__gallery .assert__sym {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__sym:after {
    content: " ";
    display: block;
    clear: both; }

.test__gallery .assert__sym .nest:after {
  content: " ";
  display: block;
  clear: both; }
.test__gallery .assert__sym .test, .test__gallery .assert__sym .expect {
  margin-bottom: 0; }

/* "Items should create 3x symmetrical isolated gallery." */
.test__gallery .assert__sym:before {
  content: "Items should create 3x symmetrical isolated gallery.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__gallery .assert__sym .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__sym .test:nth-child(3n + 1) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__sym .test:nth-child(3n + 2) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__sym .test:nth-child(3n + 3) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
.test__gallery .assert__sym .expect {
  width: 28.0%;
  float: left; }
  .test__gallery .assert__sym .expect:nth-child(3n + 1) {
    margin-right: -100%;
    margin-left: 0;
    clear: left; }
  .test__gallery .assert__sym .expect:nth-child(3n + 2) {
    margin-left: 36%;
    margin-right: -100%;
    clear: none; }
  .test__gallery .assert__sym .expect:nth-child(3n + 3) {
    margin-left: 72%;
    margin-right: -100%;
    clear: none; }

.test__gallery .assert__inside {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__inside:after {
    content: " ";
    display: block;
    clear: both; }

.test__gallery .assert__inside .nest:after {
  content: " ";
  display: block;
  clear: both; }
.test__gallery .assert__inside .test, .test__gallery .assert__inside .expect {
  margin-bottom: 0; }

/* "Items should create 4x isolated gallery with inside-gutters." */
.test__gallery .assert__inside:before {
  content: "Items should create 4x isolated gallery with inside-gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__gallery .assert__inside .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__inside .test:nth-child(4n + 1) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__inside .test:nth-child(4n + 2) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__inside .test:nth-child(4n + 3) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__inside .test:nth-child(4n + 4) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
.test__gallery .assert__inside .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  width: 25.0%;
  float: left;
  padding-left: 1.25%;
  padding-right: 1.25%; }
  .test__gallery .assert__inside .expect:nth-child(4n + 1) {
    margin-right: -100%;
    margin-left: 0;
    clear: left; }
  .test__gallery .assert__inside .expect:nth-child(4n + 2) {
    margin-left: 25%;
    margin-right: -100%;
    clear: none; }
  .test__gallery .assert__inside .expect:nth-child(4n + 3) {
    margin-left: 50%;
    margin-right: -100%;
    clear: none; }
  .test__gallery .assert__inside .expect:nth-child(4n + 4) {
    margin-left: 75%;
    margin-right: -100%;
    clear: none; }

.test__gallery .assert__inside-static {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__inside-static:after {
    content: " ";
    display: block;
    clear: both; }

.test__gallery .assert__inside-static .nest:after {
  content: " ";
  display: block;
  clear: both; }
.test__gallery .assert__inside-static .test, .test__gallery .assert__inside-static .expect {
  margin-bottom: 0; }

/* "Items should create 3x isolated gallery with inside-static gutters." */
.test__gallery .assert__inside-static:before {
  content: "Items should create 3x isolated gallery with inside-static gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__gallery .assert__inside-static .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__inside-static .test:nth-child(3n + 1) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__inside-static .test:nth-child(3n + 2) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__inside-static .test:nth-child(3n + 3) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
.test__gallery .assert__inside-static .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  width: 33.33333%;
  float: left;
  padding-left: 2em;
  padding-right: 2em; }
  .test__gallery .assert__inside-static .expect:nth-child(3n + 1) {
    margin-right: -100%;
    margin-left: 0;
    clear: left; }
  .test__gallery .assert__inside-static .expect:nth-child(3n + 2) {
    margin-left: 33.33333%;
    margin-right: -100%;
    clear: none; }
  .test__gallery .assert__inside-static .expect:nth-child(3n + 3) {
    margin-left: 66.66667%;
    margin-right: -100%;
    clear: none; }

.test__gallery .assert__split {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__split:after {
    content: " ";
    display: block;
    clear: both; }

.test__gallery .assert__split .nest:after {
  content: " ";
  display: block;
  clear: both; }
.test__gallery .assert__split .test, .test__gallery .assert__split .expect {
  margin-bottom: 0; }

/* "Items should create 4x isolated gallery with split-gutters." */
.test__gallery .assert__split:before {
  content: "Items should create 4x isolated gallery with split-gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__gallery .assert__split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__split .test:nth-child(4n + 1) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__split .test:nth-child(4n + 2) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__split .test:nth-child(4n + 3) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__split .test:nth-child(4n + 4) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
.test__gallery .assert__split .expect {
  width: 22.5%;
  float: left; }
  .test__gallery .assert__split .expect:nth-child(4n + 1) {
    margin-right: -100%;
    margin-left: 1.25%;
    clear: left; }
  .test__gallery .assert__split .expect:nth-child(4n + 2) {
    margin-left: 26.25%;
    margin-right: -100%;
    clear: none; }
  .test__gallery .assert__split .expect:nth-child(4n + 3) {
    margin-left: 51.25%;
    margin-right: -100%;
    clear: none; }
  .test__gallery .assert__split .expect:nth-child(4n + 4) {
    margin-left: 76.25%;
    margin-right: -100%;
    clear: none; }

.test__gallery .assert__asym {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__asym:after {
    content: " ";
    display: block;
    clear: both; }

.test__gallery .assert__asym .nest:after {
  content: " ";
  display: block;
  clear: both; }
.test__gallery .assert__asym .test, .test__gallery .assert__asym .expect {
  margin-bottom: 0; }

/* "Items should create 3x isolated asymmetrical gallery." */
.test__gallery .assert__asym:before {
  content: "Items should create 3x isolated asymmetrical gallery.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__gallery .assert__asym .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__asym .test:nth-child(3n + 1) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__asym .test:nth-child(3n + 2) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__asym .test:nth-child(3n + 3) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
.test__gallery .assert__asym .expect {
  float: left; }
  .test__gallery .assert__asym .expect:nth-child(3n + 1) {
    width: 32%;
    margin-right: -100%;
    margin-left: 0;
    clear: left; }
  .test__gallery .assert__asym .expect:nth-child(3n + 2) {
    width: 32%;
    margin-left: 34%;
    margin-right: -100%;
    clear: none; }
  .test__gallery .assert__asym .expect:nth-child(3n + 3) {
    width: 32%;
    margin-left: 68%;
    margin-right: -100%;
    clear: none; }

.test__gallery .assert__asym-inside {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__asym-inside:after {
    content: " ";
    display: block;
    clear: both; }

.test__gallery .assert__asym-inside .nest:after {
  content: " ";
  display: block;
  clear: both; }
.test__gallery .assert__asym-inside .test, .test__gallery .assert__asym-inside .expect {
  margin-bottom: 0; }

/* "Items should create 2x isolated asymmetrical gallery, with inside gutters." */
.test__gallery .assert__asym-inside:before {
  content: "Items should create 2x isolated asymmetrical gallery, with inside gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__gallery .assert__asym-inside .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__gallery .assert__asym-inside .test:nth-child(2n + 1) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
  .test__gallery .assert__asym-inside .test:nth-child(2n + 2) {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ }
.test__gallery .assert__asym-inside .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  float: left;
  padding-left: 2.5%;
  padding-right: 2.5%; }
  .test__gallery .assert__asym-inside .expect:nth-child(2n + 1) {
    width: 40%;
    margin-left: 0;
    margin-right: -100%;
    clear: left; }
  .test__gallery .assert__asym-inside .expect:nth-child(2n + 2) {
    width: 60%;
    margin-left: 40%;
    margin-right: -100%;
    clear: none; }

/*  */
/* # Module: Row Syntax */
/* -------------------- */
/* - [mixin] break */
.test__break .assert__break {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__break .assert__break:after {
    content: " ";
    display: block;
    clear: both; }

.test__break .assert__break .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "breaks should clear preceeding floats" */
.test__break .assert__break:before {
  content: "breaks should clear preceeding floats";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__break .assert__break .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__break .assert__break .expect {
  clear: both; }

/* - [mixin] nobreak */
.test__nobreak .assert__nobreak {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__nobreak .assert__nobreak:after {
    content: " ";
    display: block;
    clear: both; }

.test__nobreak .assert__nobreak .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__nobreak .assert__nobreak .test, .test__nobreak .assert__nobreak .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Non-breaks should not clear floated elements" */
.test__nobreak .assert__nobreak:before {
  content: "Non-breaks should not clear floated elements";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__nobreak .assert__nobreak .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__nobreak .assert__nobreak .expect {
  clear: none; }

/* - [mixin] full */
.test__full .assert__split {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__full .assert__split:after {
    content: " ";
    display: block;
    clear: both; }

.test__full .assert__split .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Full spans clear preceeding floats, and have gutters." */
.test__full .assert__split:before {
  content: "Full spans clear preceeding floats, and have gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__full .assert__split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__full .assert__split .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

.test__full .assert__after {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__full .assert__after:after {
    content: " ";
    display: block;
    clear: both; }

.test__full .assert__after .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Full spans clear preceeding floats, and have gutters." */
.test__full .assert__after:before {
  content: "Full spans clear preceeding floats, and have gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__full .assert__after .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__full .assert__after .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* - [mixin] first */
.test__first .assert__before {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__first .assert__before:after {
    content: " ";
    display: block;
    clear: both; }

.test__first .assert__before .test, .test__first .assert__before .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  clear: left; }

/* "First items should have left margins removed." */
.test__first .assert__before:before {
  content: "First items should have left margins removed.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__first .assert__before .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__first .assert__before .expect {
  margin-left: 0; }

.test__first .assert__split {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__first .assert__split:after {
    content: " ";
    display: block;
    clear: both; }

.test__first .assert__split .test, .test__first .assert__split .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  clear: left; }

/* "Nothing should happen to split first items." */
.test__first .assert__split:before {
  content: "Nothing should happen to split first items.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }

/* - [mixin] alpha */
.test__alpha .assert__alpha {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__alpha .assert__alpha:after {
    content: " ";
    display: block;
    clear: both; }

.test__alpha .assert__alpha .test, .test__alpha .assert__alpha .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  clear: left; }

/* "Alpha items should have left margins removed." */
.test__alpha .assert__alpha:before {
  content: "Alpha items should have left margins removed.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__alpha .assert__alpha .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__alpha .assert__alpha .expect {
  margin-left: 0; }

/* - [mixin] last */
.test__last .assert__after {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__last .assert__after:after {
    content: " ";
    display: block;
    clear: both; }

.test__last .assert__after .test, .test__last .assert__after .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  clear: both; }

/* "Last items should float right, with right margins removed" */
.test__last .assert__after:before {
  content: "Last items should float right, with right margins removed";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__last .assert__after .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__last .assert__after .expect {
  float: right;
  margin-right: 0; }

.test__last .assert__split {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__last .assert__split:after {
    content: " ";
    display: block;
    clear: both; }

.test__last .assert__split .test, .test__last .assert__split .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  clear: both; }

/* "Last items should float right." */
.test__last .assert__split:before {
  content: "Last items should float right.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__last .assert__split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__last .assert__split .expect {
  float: right; }

.test__last .assert__last-flow {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__last .assert__last-flow:after {
    content: " ";
    display: block;
    clear: both; }

.test__last .assert__last-flow .test, .test__last .assert__last-flow .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  clear: both; }

/* "Last items should not override float if last-flow is "from", with right margins removed" */
.test__last .assert__last-flow:before {
  content: 'Last items should not override float if last-flow is "from", with right margins removed';
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__last .assert__last-flow .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__last .assert__last-flow .expect {
  margin-right: 0; }

/* - [mixin] omega */
.test__omega .assert__omega {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__omega .assert__omega:after {
    content: " ";
    display: block;
    clear: both; }

.test__omega .assert__omega .test, .test__omega .assert__omega .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  clear: both; }

/* "Omega items should float right, with right margins removed" */
.test__omega .assert__omega:before {
  content: "Omega items should float right, with right margins removed";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__omega .assert__omega .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__omega .assert__omega .expect {
  float: right;
  margin-right: 0; }

/* Test: [function] get-edge */
/*   ✔ Returns full if span is equal to column-count */
/*   ✔ Returns null if no location or edge given */
/*   ✔ Returns valid edge without changes */
/*   ✔ Returns last in place of omega */
/*   ✔ Calculates first based on location when possible */
/*   ✔ Calculates last based on location when possible */
/*  */
/* Test: [function] get-location */
/*   ✔ Returns valid location without changes */
/*   ✔ Calculates location based on first when possible */
/*   ✔ Calculates location based on last when possible */
/*   ✔ Return null when location can't be calculated */
/*  */
/*  */
/* # Module: Margin Syntax */
/* ----------------------- */
/* - [mixin] pre */
.test__pre .assert__wide {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pre .assert__wide:after {
    content: " ";
    display: block;
    clear: both; }

.test__pre .assert__wide .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pre .assert__wide .test, .test__pre .assert__wide .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should have 2-columns (wide) margin before." */
.test__pre .assert__wide:before {
  content: "Items should have 2-columns (wide) margin before.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pre .assert__wide .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pre .assert__wide .expect {
  margin-left: 30%; }

.test__pre .assert__split {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pre .assert__split:after {
    content: " ";
    display: block;
    clear: both; }

.test__pre .assert__split .test, .test__pre .assert__split .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should have 2-columns margin before, including split gutter." */
.test__pre .assert__split:before {
  content: "Items should have 2-columns margin before, including split gutter.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pre .assert__split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pre .assert__split .expect {
  margin-left: 26.25%; }

.test__pre .assert__split {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pre .assert__split:after {
    content: " ";
    display: block;
    clear: both; }

.test__pre .assert__split .test, .test__pre .assert__split .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Pre works with split 0 gutters." */
.test__pre .assert__split:before {
  content: "Pre works with split 0 gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pre .assert__split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pre .assert__split .expect {
  margin-left: 20%; }

.test__pre .assert__wider {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pre .assert__wider:after {
    content: " ";
    display: block;
    clear: both; }

.test__pre .assert__wider .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pre .assert__wider .test, .test__pre .assert__wider .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should have 2-columns (wider) margin before." */
.test__pre .assert__wider:before {
  content: "Items should have 2-columns (wider) margin before.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pre .assert__wider .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pre .assert__wider .expect {
  margin-left: 35%; }

/* - [mixin] post */
.test__post .assert__wide {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__post .assert__wide:after {
    content: " ";
    display: block;
    clear: both; }

/* "Items should have 2-columns (wide) margin after." */
.test__post .assert__wide:before {
  content: "Items should have 2-columns (wide) margin after.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__post .assert__wide .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__post .assert__wide .expect {
  margin-right: 35%; }

.test__post .assert__split {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__post .assert__split:after {
    content: " ";
    display: block;
    clear: both; }

.test__post .assert__split .test, .test__post .assert__split .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should have 2-columns margin after, including split gutter." */
.test__post .assert__split:before {
  content: "Items should have 2-columns margin after, including split gutter.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__post .assert__split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__post .assert__split .expect {
  margin-right: 33.75%; }

.test__post .assert__wider {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__post .assert__wider:after {
    content: " ";
    display: block;
    clear: both; }

.test__post .assert__wider .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  height: 1rem; }
.test__post .assert__wider .test, .test__post .assert__wider .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should have 1-column (wide-2) margin after." */
.test__post .assert__wider:before {
  content: "Items should have 1-column (wide-2) margin after.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__post .assert__wider .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__post .assert__wider .expect {
  margin-right: 35%; }

/* - [mixin] push */
.test__push .assert__push {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__push .assert__push:after {
    content: " ";
    display: block;
    clear: both; }

.test__push .assert__push .test, .test__push .assert__push .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should have 2-columns margin before." */
.test__push .assert__push:before {
  content: "Items should have 2-columns margin before.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__push .assert__push .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__push .assert__push .expect {
  margin-left: 26.25%; }

/* - [mixin] pull */
.test__pull .assert__narrow {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pull .assert__narrow:after {
    content: " ";
    display: block;
    clear: both; }

.test__pull .assert__narrow .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pull .assert__narrow .test, .test__pull .assert__narrow .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should pull 1-column, overlapping the spacer." */
.test__pull .assert__narrow:before {
  content: "Items should pull 1-column, overlapping the spacer.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pull .assert__narrow .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pull .assert__narrow .expect {
  margin-left: -20%; }

.test__pull .assert__split {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pull .assert__split:after {
    content: " ";
    display: block;
    clear: both; }

.test__pull .assert__split .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pull .assert__split .test, .test__pull .assert__split .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should pull 1-column, overlapping the spacer." */
.test__pull .assert__split:before {
  content: "Items should pull 1-column, overlapping the spacer.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pull .assert__split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pull .assert__split .expect {
  margin-left: -11.25%; }

.test__pull .assert__wide {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pull .assert__wide:after {
    content: " ";
    display: block;
    clear: both; }

.test__pull .assert__wide .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pull .assert__wide .test, .test__pull .assert__wide .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should pull 1-column, overlapping the spacer." */
.test__pull .assert__wide:before {
  content: "Items should pull 1-column, overlapping the spacer.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pull .assert__wide .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pull .assert__wide .expect {
  margin-left: -22.5%; }

.test__pull .assert__wider {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pull .assert__wider:after {
    content: " ";
    display: block;
    clear: both; }

.test__pull .assert__wider .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pull .assert__wider .test, .test__pull .assert__wider .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should pull 1-column, overlapping the spacer." */
.test__pull .assert__wider:before {
  content: "Items should pull 1-column, overlapping the spacer.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pull .assert__wider .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pull .assert__wider .expect {
  margin-left: -25%; }

/* - [mixin] squish */
.test__squish .assert__simple {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__squish .assert__simple:after {
    content: " ";
    display: block;
    clear: both; }

/* "Items should have 2-columns margin before and after." */
.test__squish .assert__simple:before {
  content: "Items should have 2-columns margin before and after.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__squish .assert__simple .test {
  -susy-squish: first 2, last 2 inspect;
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__squish .assert__simple .expect {
  -susy-squish: first 2, last 2 inspect;
  margin-left: 35%;
  margin-right: 35%; }

.test__squish .assert__split {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__squish .assert__split:after {
    content: " ";
    display: block;
    clear: both; }

/* "Items should have 2-columns margin before and after." */
.test__squish .assert__split:before {
  content: "Items should have 2-columns margin before and after.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__squish .assert__split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__squish .assert__split .expect {
  margin-left: 35.25%;
  margin-right: 35.25%; }

.test__squish .assert__nested {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__squish .assert__nested:after {
    content: " ";
    display: block;
    clear: both; }

.test__squish .assert__nested .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should have 1-column margin before, and 2 after - nested." */
.test__squish .assert__nested:before {
  content: "Items should have 1-column margin before, and 2 after - nested.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__squish .assert__nested .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__squish .assert__nested .expect {
  margin-left: 20%;
  margin-right: 40%; }

/*  */
/* # Module: Padding Syntax */
/* ------------------------ */
/* - [mixin] prefix */
.test__prefix .assert__wide {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__prefix .assert__wide:after {
    content: " ";
    display: block;
    clear: both; }

/* "Items should have 3 columns padding before." */
.test__prefix .assert__wide:before {
  content: "Items should have 3 columns padding before.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__prefix .assert__wide .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__prefix .assert__wide .expect {
  padding-left: 45%; }

.test__prefix .assert__wider {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__prefix .assert__wider:after {
    content: " ";
    display: block;
    clear: both; }

.test__prefix .assert__wider .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__prefix .assert__wider .test, .test__prefix .assert__wider .expect {
  overflow: hidden; }

/* "Items should have 3 columns padding before." */
.test__prefix .assert__wider:before {
  content: "Items should have 3 columns padding before.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__prefix .assert__wider .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__prefix .assert__wider .expect {
  padding-left: 50%; }

/* - [mixin] suffix */
.test__suffix .assert__wide {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__suffix .assert__wide:after {
    content: " ";
    display: block;
    clear: both; }

/* "Items should have 2 columns padding after." */
.test__suffix .assert__wide:before {
  content: "Items should have 2 columns padding after.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__suffix .assert__wide .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__suffix .assert__wide .expect {
  padding-right: 35%; }

.test__suffix .assert__wider {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__suffix .assert__wider:after {
    content: " ";
    display: block;
    clear: both; }

.test__suffix .assert__wider .spacer {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__suffix .assert__wider .test, .test__suffix .assert__wider .expect {
  overflow: hidden; }

/* "Items should have 2 columns padding after." */
.test__suffix .assert__wider:before {
  content: "Items should have 2 columns padding after.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__suffix .assert__wider .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__suffix .assert__wider .expect {
  padding-right: 57.5%; }

/* - [mixin] pad */
.test__pad .assert__simple {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pad .assert__simple:after {
    content: " ";
    display: block;
    clear: both; }

/* "Items should have 2 columns padding before and after." */
.test__pad .assert__simple:before {
  content: "Items should have 2 columns padding before and after.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pad .assert__simple .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pad .assert__simple .expect {
  padding-left: 35%;
  padding-right: 35%; }

.test__pad .assert__nested {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pad .assert__nested:after {
    content: " ";
    display: block;
    clear: both; }

.test__pad .assert__nested .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should have 1 column padding before, and 2 after - nested." */
.test__pad .assert__nested:before {
  content: "Items should have 1 column padding before, and 2 after - nested.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pad .assert__nested .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pad .assert__nested .expect {
  padding-left: 15%;
  padding-right: 30%; }

.test__pad .assert__inside {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pad .assert__inside:after {
    content: " ";
    display: block;
    clear: both; }

/* "Items should have 2 columns padding before and after, and keep gutters." */
.test__pad .assert__inside:before {
  content: "Items should have 2 columns padding before and after, and keep gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pad .assert__inside .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pad .assert__inside .expect {
  padding-left: 26.25%;
  padding-right: 26.25%; }

.test__pad .assert__inside-nogutters {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__pad .assert__inside-nogutters:after {
    content: " ";
    display: block;
    clear: both; }

/* "Items should have 2 columns padding before and after, without gutters." */
.test__pad .assert__inside-nogutters:before {
  content: "Items should have 2 columns padding before and after, without gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__pad .assert__inside-nogutters .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__pad .assert__inside-nogutters .expect {
  padding-left: 25%;
  padding-right: 25%; }

/*  */
/* # Module: Bleed Syntax */
/* ---------------------- */
/* - [mixin] bleed */
.test__bleed .assert__simple {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__bleed .assert__simple:after {
    content: " ";
    display: block;
    clear: both; }

.test__bleed .assert__simple .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should bleed 1 column outside their nested context" */
.test__bleed .assert__simple:before {
  content: "Items should bleed 1 column outside their nested context";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__bleed .assert__simple .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__bleed .assert__simple .expect {
  margin-right: -15%;
  margin-left: -15%;
  padding-right: 15%;
  padding-left: 15%; }

.test__bleed .assert__inside {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__bleed .assert__inside:after {
    content: " ";
    display: block;
    clear: both; }

.test__bleed .assert__inside .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  margin-bottom: 1rem;
  margin-top: 1rem; }

/* "Items should bleed 1em on all sides, and retain their static gutters" */
.test__bleed .assert__inside:before {
  content: "Items should bleed 1em on all sides, and retain their static gutters";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__bleed .assert__inside .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__bleed .assert__inside .expect {
  margin: -1em;
  padding: 1em 1.5em; }

.test__bleed .assert__split {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__bleed .assert__split:after {
    content: " ";
    display: block;
    clear: both; }

.test__bleed .assert__split .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should bleed 1 column horizontal, and retain gutters." */
.test__bleed .assert__split:before {
  content: "Items should bleed 1 column horizontal, and retain gutters.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__bleed .assert__split .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__bleed .assert__split .expect {
  margin-right: -12.5%;
  margin-left: -12.5%;
  padding-right: 12.5%;
  padding-left: 12.5%; }

/* - [mixin] bleed-x */
.test__bleed-x .assert__simple {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__bleed-x .assert__simple:after {
    content: " ";
    display: block;
    clear: both; }

.test__bleed-x .assert__simple .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should bleed 1 column left, and 2 columns right" */
.test__bleed-x .assert__simple:before {
  content: "Items should bleed 1 column left, and 2 columns right";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__bleed-x .assert__simple .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__bleed-x .assert__simple .expect {
  margin-right: -30%;
  margin-left: -15%;
  padding-right: 30%;
  padding-left: 15%; }

.test__bleed-x .assert__inside {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__bleed-x .assert__inside:after {
    content: " ";
    display: block;
    clear: both; }

.test__bleed-x .assert__inside .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }

/* "Items should bleed 1 column, and retain their gutters" */
.test__bleed-x .assert__inside:before {
  content: "Items should bleed 1 column, and retain their gutters";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__bleed-x .assert__inside .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__bleed-x .assert__inside .expect {
  margin-right: -12.5%;
  margin-left: -12.5%;
  padding-right: 13.75%;
  padding-left: 13.75%; }

/* - [mixin] bleed-y */
.test__bleed-y .assert__simple {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__bleed-y .assert__simple:after {
    content: " ";
    display: block;
    clear: both; }

.test__bleed-y .assert__simple .nest {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  margin-bottom: 1rem;
  margin-top: 1rem; }

/* "Items should bleed .5em top, and 1em bottom." */
.test__bleed-y .assert__simple:before {
  content: "Items should bleed .5em top, and 1em bottom.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__bleed-y .assert__simple .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__bleed-y .assert__simple .expect {
  margin-top: -0.5em;
  margin-bottom: -1em;
  padding-top: 0.5em;
  padding-bottom: 1em; }

/* Test: [function] get-bleed */
/*   ✔ get-bleed handles 0, span, and length arguments. */
/*   ✔ get-bleed handles inside gutters. */
/*   ✔ get-bleed can handle no-gutters inside. */
/*  */
/* Test: [function] bleed-shorthand */
/*   ✔ Returns shorthand for margin and padding, separate or combined. */
/*   ✔ Returns combined shorthand for margin, no shorthand for padding. */
/*  */
/*  */
/* # Module: breakpoint integration */
/* -------------------------------- */
/* Test: [mixin] susy-breakpoint */
/*   ✔ Assert that we arent testing the default layout */
@media (min-width: 720px) {
  /*   ✔ Susy-breakpoint creates a new global layout context */ }
/*  */
/* - [mixin] susy-breakpoint */
.test__susy-breakpoint .assert__susy-breakpoint {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__susy-breakpoint .assert__susy-breakpoint .test,
.test__susy-breakpoint .assert__susy-breakpoint .expect {
  width: 100%; }

/* "Creates a custom media-query around any content block." */
.test__susy-breakpoint .assert__susy-breakpoint:before {
  content: "Creates a custom media-query around any content block.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
@media (min-width: 35em) {
  .test__susy-breakpoint .assert__susy-breakpoint .test {
    /*   OUTPUT   */
    /*   END_OUTPUT   */
    /*   OUTPUT   */
    /*   END_OUTPUT   */ } }
.foo .test__susy-breakpoint .assert__susy-breakpoint .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
@media (min-width: 35em) {
  .test__susy-breakpoint .assert__susy-breakpoint .expect {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 50%;
    float: left;
    padding-left: 1.25%;
    padding-right: 1.25%; } }
.foo .test__susy-breakpoint .assert__susy-breakpoint .expect {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  width: 50%;
  float: left;
  padding-left: 1.25%;
  padding-right: 1.25%; }

/* - [mixin] susy-media */
.test__susy-media .assert__susy-media {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__susy-media .assert__susy-media .test,
.test__susy-media .assert__susy-media .expect {
  width: 100%; }

/* "Creates a custom media-query around any content block." */
.test__susy-media .assert__susy-media:before {
  content: "Creates a custom media-query around any content block.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
@media (min-width: 35em) {
  .test__susy-media .assert__susy-media .test {
    width: 50%; } }
.foo .test__susy-media .assert__susy-media .test {
  width: 50%; }
@media (min-width: 35em) {
  .test__susy-media .assert__susy-media .expect {
    width: 50%; } }
.foo .test__susy-media .assert__susy-media .expect {
  width: 50%; }

/* Test: [function] susy-get-media */
/*   ✔ Returns $susy-media values based on key name. */
/*   ✔ Returns $susy-media values when key = value. */
/*  */
/* Test: [function] susy-parse-media */
/*   ✔ Returns a simple length as min-width query. */
/*   ✔ Returns two length as min and max-width queries. */
/*   ✔ Returns single list pair as custom query. */
/*   ✔ Returns a map as custom queries. */
/*  */
/* Test: susy-render-media */
/*   ✔ Returns a usable query string based on a map. */
/*  */
/*  */
/* # Module: Shared Output */
/* ----------------------- */
/* - [mixin] output */
.test__output .assert__output {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Property value pairs are passed in as maps and output as CSS." */
.test__output .assert__output:before {
  content: "Property value pairs are passed in as maps and output as CSS.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__output .assert__output .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__output .assert__output .expect {
  width: 3em;
  position: relative; }

/*  */
/* # Module: Direction Helpers */
/* --------------------------- */
/* Test: [function] get-direction */
/*   ✔ The to-direction for "ltr" should be "right". */
/*   ✔ The from-direction for "rtl" should be "right". */
/*  */
/* Test: [function] to */
/*   ✔ The to-direction for "ltr" should be "right". */
/*   ✔ The to-direction for "rtl" should be "left". */
/*  */
/* Test: [function] from */
/*   ✔ The from-direction for "ltr" should be "left". */
/*   ✔ The from-direction for "rtl" should be "right". */
/*  */
/*  */
/* # Module: Grid Background Output */
/* -------------------------------- */
/* - [mixin] background-grid-output */
.test__background-grid-output .assert__show {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__background-grid-output .assert__show .test, .test__background-grid-output .assert__show .expect {
  background: none;
  padding-bottom: 2rem;
  padding-top: 2rem; }

/* "Elements should show a horizontal clipped red-green-blue gradient, and a vertical baseline" */
.test__background-grid-output .assert__show:before {
  content: "Elements should show a horizontal clipped red-green-blue gradient, and a vertical baseline";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__background-grid-output .assert__show .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__background-grid-output .assert__show .expect {
  background-image: linear-gradient(to right, #fcc, #cfc 25%, #ccf), linear-gradient(to bottom, #000 5%, transparent 5%);
  background-size: auto, 100% 16px;
  background-origin: content-box, border-box;
  background-clip: content-box, border-box;
  background-position: left top; }

/*  */
/* # Module: Shared Container API */
/* ------------------------------ */
/* - [mixin] container-output */
.test__container-output .assert__fluid {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Containers should have 60em max-width, centered." */
.test__container-output .assert__fluid:before {
  content: "Containers should have 60em max-width, centered.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__container-output .assert__fluid .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__container-output .assert__fluid .expect {
  max-width: 60em;
  margin-left: auto;
  margin-right: auto; }

.test__container-output .assert__static {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Containers should have 30em width, flush right." */
.test__container-output .assert__static:before {
  content: "Containers should have 30em width, flush right.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__container-output .assert__static .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__container-output .assert__static .expect {
  width: 30em;
  margin-left: auto;
  margin-right: 0; }

.test__container-output .assert__auto {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Containers should have 100% width." */
.test__container-output .assert__auto:before {
  content: "Containers should have 100% width.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__container-output .assert__auto .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__container-output .assert__auto .expect {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto; }

/*  */
/* # Module: Shared Margin API */
/* --------------------------- */
/* - [mixin] margin-output */
.test__margin-output .assert__margin-output {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Elements should have 25% right margin, 8em left." */
.test__margin-output .assert__margin-output:before {
  content: "Elements should have 25% right margin, 8em left.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__margin-output .assert__margin-output .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__margin-output .assert__margin-output .expect {
  margin-right: 25%;
  margin-left: 8em; }

/*  */
/* # Module: Shared Padding API */
/* ---------------------------- */
/* - [mixin] padding-output */
.test__padding-output .assert__padding-output {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Elements should have 25% right padding, 8em left." */
.test__padding-output .assert__padding-output:before {
  content: "Elements should have 25% right padding, 8em left.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__padding-output .assert__padding-output .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__padding-output .assert__padding-output .expect {
  padding-right: 25%;
  padding-left: 8em; }

/*  */
/* # Module: Susy Support */
/* ---------------------- */
/* - [mixin] susy-support */
.test__susy-support .assert__susy-support {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Recogizes properties that need special support,and passes others through directly." */
.test__susy-support .assert__susy-support:before {
  content: "Recogizes properties that need special support,and passes others through directly.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__susy-support .assert__susy-support .test {
  width: 30em;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }
.test__susy-support .assert__susy-support .expect {
  width: 30em;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }

/* Test: [function] susy-support */
/*   ✔ Returns false when support is turned off. */
/*   ✔ Returns false when requirements are missing. */
/*   ✔ Returns support value when requirements are available. */
/*  */
/*  */
/* # Module: Prefix Support */
/* ------------------------ */
/* - [mixin] susy-prefix */
.test__susy-prefix .assert__susy-prefix {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Requested prefixes are added to output." */
.test__susy-prefix .assert__susy-prefix:before {
  content: "Requested prefixes are added to output.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__susy-prefix .assert__susy-prefix .test {
  -moz-border-radius: 3em;
  -webkit-border-radius: 3em;
  border-radius: 3em; }
.test__susy-prefix .assert__susy-prefix .expect {
  -moz-border-radius: 3em;
  -webkit-border-radius: 3em;
  border-radius: 3em; }

/*  */
/* # Module: Background Support */
/* ---------------------------- */
/* - [mixin] susy-background-image */
.test__susy-background-image .assert__susy-background-image {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Without Compass, background-image is output directly." */
.test__susy-background-image .assert__susy-background-image:before {
  content: "Without Compass, background-image is output directly.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__susy-background-image .assert__susy-background-image .test {
  background-image: linear-gradient(to left, red, green, blue); }
.test__susy-background-image .assert__susy-background-image .expect {
  background-image: linear-gradient(to left, red, green, blue); }

/* - [mixin] susy-background-size */
.test__susy-background-size .assert__susy-background-size {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Without Compass, background-size is output directly." */
.test__susy-background-size .assert__susy-background-size:before {
  content: "Without Compass, background-size is output directly.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__susy-background-size .assert__susy-background-size .test {
  background-size: cover; }
.test__susy-background-size .assert__susy-background-size .expect {
  background-size: cover; }

/* - [mixin] susy-background-origin */
.test__susy-background-origin .assert__susy-background-origin {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Without Compass, background-origin is output directly." */
.test__susy-background-origin .assert__susy-background-origin:before {
  content: "Without Compass, background-origin is output directly.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__susy-background-origin .assert__susy-background-origin .test {
  background-origin: content-box; }
.test__susy-background-origin .assert__susy-background-origin .expect {
  background-origin: content-box; }

/* - [mixin] susy-background-clip */
.test__susy-background-clip .assert__susy-background-clip {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Without Compass, background-clip is output directly." */
.test__susy-background-clip .assert__susy-background-clip:before {
  content: "Without Compass, background-clip is output directly.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__susy-background-clip .assert__susy-background-clip .test {
  background-clip: border-box; }
.test__susy-background-clip .assert__susy-background-clip .expect {
  background-clip: border-box; }

/*  */
/* # Module: Box Sizing Support */
/* ---------------------------- */
/* - [mixin] susy-box-sizing */
.test__susy-box-sizing .assert__border-box {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__susy-box-sizing .assert__border-box .test, .test__susy-box-sizing .assert__border-box .expect {
  width: 50%;
  padding: 0 2em; }

/* "Box-models are correctly output and prefixed." */
.test__susy-box-sizing .assert__border-box:before {
  content: "Box-models are correctly output and prefixed.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__susy-box-sizing .assert__border-box .test {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }
.test__susy-box-sizing .assert__border-box .expect {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }

/*  */
/* # Module: rem Support */
/* --------------------- */
.test__ .assert__ {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Without compass, rem units are output unchanged." */
.test__ .assert__:before {
  content: "Without compass, rem units are output unchanged.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__ .assert__ .test {
  width: 3rem; }
.test__ .assert__ .expect {
  width: 3rem; }

/*  */
/* # Module: Clearfix Support */
/* -------------------------- */
/* - [mixin] susy-clearfix */
.test__susy-clearfix .assert__clearfix {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__susy-clearfix .assert__clearfix .spacer {
  float: left;
  width: 25%; }

/* "Elements should clear floated children." */
.test__susy-clearfix .assert__clearfix:before {
  content: "Elements should clear floated children.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__susy-clearfix .assert__clearfix .test:after {
  content: " ";
  display: block;
  clear: both; }
.test__susy-clearfix .assert__clearfix .expect:after {
  content: " ";
  display: block;
  clear: both; }

/*  */
/* # Module: Float Container API */
/* ----------------------------- */
/* - [mixin] float-container */
.test__float-container .assert__float-container {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Containers should be 30em wide, flush left." */
.test__float-container .assert__float-container:before {
  content: "Containers should be 30em wide, flush left.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__float-container .assert__float-container .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
  .test__float-container .assert__float-container .test:after {
    content: " ";
    display: block;
    clear: both; }
.test__float-container .assert__float-container .expect {
  max-width: 30em;
  margin-left: 0;
  margin-right: auto; }
  .test__float-container .assert__float-container .expect:after {
    content: " ";
    display: block;
    clear: both; }

/*  */
/* # Module: Float Span API */
/* ------------------------ */
/* - [mixin] float-span-output */
.test__float-span-output .assert__full {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__float-span-output .assert__full .expect {
  clear: both; }

/* "Output should be 25%, floated left, with matching margins/padding" */
.test__float-span-output .assert__full:before {
  content: "Output should be 25%, floated left, with matching margins/padding";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__float-span-output .assert__full .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__float-span-output .assert__full .expect {
  width: 25%;
  float: left;
  margin-left: 5em;
  margin-right: 2em;
  padding-left: 3em;
  padding-right: 4em; }

.test__float-span-output .assert__float-to {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__float-span-output .assert__float-to .expect {
  clear: both; }

/* "Output should be 25%, floated right" */
.test__float-span-output .assert__float-to:before {
  content: "Output should be 25%, floated right";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__float-span-output .assert__float-to .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__float-span-output .assert__float-to .expect {
  width: 25%;
  float: right; }

.test__float-span-output .assert__float-null {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

/* "Output should be 25%, not floated" */
.test__float-span-output .assert__float-null:before {
  content: "Output should be 25%, not floated";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__float-span-output .assert__float-null .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__float-span-output .assert__float-null .expect {
  width: 25%; }

/*  */
/* # Module: Float End API */
/* ----------------------- */
/* - [mixin] float-last */
.test__float-last .assert__default {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__float-last .assert__default .test, .test__float-last .assert__default .expect {
  float: left;
  width: 75%;
  margin-right: 5%; }

/* "Items should float flush right." */
.test__float-last .assert__default:before {
  content: "Items should float flush right.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__float-last .assert__default .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__float-last .assert__default .expect {
  float: right;
  margin-right: 0; }

.test__float-last .assert__last-flow-from {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__float-last .assert__last-flow-from .test, .test__float-last .assert__last-flow-from .expect {
  float: left;
  width: 75%;
  margin-right: 5%; }
.test__float-last .assert__last-flow-from .expect {
  clear: both; }
.test__float-last .assert__last-flow-from .spacer {
  overflow: hidden; }

/* "Items should not have any right margin." */
.test__float-last .assert__last-flow-from:before {
  content: "Items should not have any right margin.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__float-last .assert__last-flow-from .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__float-last .assert__last-flow-from .expect {
  margin-right: 0; }

/* - [mixin] float-first */
.test__float-first .assert__float-first {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__float-first .assert__float-first .test, .test__float-first .assert__float-first .expect {
  float: left;
  width: 75%;
  margin-left: 5%; }

/* "Items should float flush left." */
.test__float-first .assert__float-first:before {
  content: "Items should float flush left.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__float-first .assert__float-first .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__float-first .assert__float-first .expect {
  margin-left: 0; }

/*  */
/* # Module: Isolation API */
/* ----------------------- */
/* - [mixin] isolate-output */
.test__isolate-output .assert__isolate-output {
  overflow: hidden;
  background: rgba(204, 204, 255, 0.5); }

.test__isolate-output .assert__isolate-output .test, .test__isolate-output .assert__isolate-output .expect {
  /*   OUTPUT   */
  /*   END_OUTPUT   */
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__isolate-output .assert__isolate-output .expect {
  clear: both; }

/* "Isolation at 30%, has 30% left margin and -100% right margin." */
.test__isolate-output .assert__isolate-output:before {
  content: "Isolation at 30%, has 30% left margin and -100% right margin.";
  display: block;
  padding: .25rem .5rem;
  text-align: left;
  font-style: italic; }
.test__isolate-output .assert__isolate-output .test {
  /*   OUTPUT   */
  /*   END_OUTPUT   */ }
.test__isolate-output .assert__isolate-output .expect {
  float: left;
  margin-left: 30%;
  margin-right: -100%; }

/*  */
.results:after {
  content: "282 Tests, 282 Passed, 0 Failed"; }

/* # SUMMARY ---------- */
/* 282 Tests: */
/*  - 282 Passed */
/*  - 0 Failed */
/* -------------------- */

/*# sourceMappingURL=test.css.map */
