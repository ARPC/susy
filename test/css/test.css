/* # Su Span [function] ---------- */
/* Fluid */
[data-module="Su Span [function]"] [data-test="Fluid"] .assert-equal {
  -result: PASS;
  -description: "Returns fluid span if no units are given"; }

/* Static */
[data-module="Su Span [function]"] [data-test="Static"] .assert-equal {
  -result: PASS;
  -description: "Returns static span if units are given"; }

/* Explicit column span */
[data-module="Su Span [function]"] [data-test="Explicit column span"] .assert-equal {
  -result: PASS;
  -description: "Handles explicit column-spans"; }

/* Explicit length span */
[data-module="Su Span [function]"] [data-test="Explicit length span"] .assert-equal {
  -result: PASS;
  -description: "Handles explicit length-spans"; }

/* # Su Gutter [function] ---------- */
/* Static gutters */
[data-module="Su Gutter [function]"] [data-test="Static gutters"] .assert-equal {
  -result: PASS;
  -description: "Static gutters are returned directly"; }

/* Fluid gutters */
[data-module="Su Gutter [function]"] [data-test="Fluid gutters"] .assert-equal {
  -result: PASS;
  -description: "Gutters are calculated as a percentage of context"; }

/* # Su Sum [function] ---------- */
/* Calculate the total units in a fluid grid */
[data-module="Su Sum [function]"] [data-test="Calculate the total units in a fluid grid"] .assert-equal {
  -result: PASS;
  -description: "Returns combined column and gutter units"; }

/* Calculate the total units in a static grid */
[data-module="Su Sum [function]"] [data-test="Calculate the total units in a static grid"] .assert-equal {
  -result: PASS;
  -description: "Returns combined column and gutter units"; }

/* Handle non-comparable gutters */
[data-module="Su Sum [function]"] [data-test="Handle non-comparable gutters"] .assert-equal {
  -result: PASS;
  -description: "No static gutters are added to fluid grids"; }

/* Handle single-column spans */
[data-module="Su Sum [function]"] [data-test="Handle single-column spans"] .assert-equal {
  -result: PASS;
  -description: "No static gutters are added to fluid grids"; }

/* # Su Slice [function] ---------- */
/* Slice a grid */
[data-module="Su Slice [function]"] [data-test="Slice a grid"] .assert-equal {
  -result: PASS;
  -description: "Returns subset of asymmetrical columns based on span and location"; }

/* Slice a grid with fractions */
[data-module="Su Slice [function]"] [data-test="Slice a grid with fractions"] .assert-equal {
  -result: PASS;
  -description: "Slice a fraction of an asymmetrical column"; }

/* # Susy Settings [function] ---------- */
/* Default configuration */
[data-module="Susy Settings [function]"] [data-test="Default configuration"] .assert-equal {
  -result: PASS;
  -description: "Returns merged map of Susy default config settings"; }

/* Configuration overrides */
[data-module="Susy Settings [function]"] [data-test="Configuration overrides"] .assert-equal {
  -result: PASS;
  -description: "Returns merged map of Susy defaults with custom overrides"; }

/* Multiple overrides */
[data-module="Susy Settings [function]"] [data-test="Multiple overrides"] .assert-equal {
  -result: PASS;
  -description: "Returns merged map of Susy defaults with multiple overrides"; }

/* # Susy Get [function] ---------- */
/* Get value from user settings */
[data-module="Susy Get [function]"] [data-test="Get value from user settings"] .assert-equal {
  -result: PASS;
  -description: "Susy-get and map-get should return the same value"; }

/* Get falsey value from user settings */
[data-module="Susy Get [function]"] [data-test="Get falsey value from user settings"] .assert-equal {
  -result: PASS;
  -description: "Susy-get and map-get should return the same value"; }

/* Get value from defaults */
[data-module="Susy Get [function]"] [data-test="Get value from defaults"] .assert-equal {
  -result: PASS;
  -description: "Susy-get and map-get should return the same value"; }

/* # Su Valid Columns [function] ---------- */
/* Fluid columns */
[data-module="Su Valid Columns [function]"] [data-test="Fluid columns"] .assert-equal {
  -result: PASS;
  -description: "A list of unitless numbers is list of fluid columns"; }

/* Single fluid column */
[data-module="Su Valid Columns [function]"] [data-test="Single fluid column"] .assert-equal {
  -result: PASS;
  -description: "A single unitless number is a single fluid column"; }

/* Static columns */
[data-module="Su Valid Columns [function]"] [data-test="Static columns"] .assert-equal {
  -result: PASS;
  -description: "A list of comparably-united numbers are a list of static columns"; }

/* Single static column */
[data-module="Su Valid Columns [function]"] [data-test="Single static column"] .assert-equal {
  -result: PASS;
  -description: "A single united number is a single static column"; }

/* # Su Valid Gutters [function] ---------- */
/* Fluid */
[data-module="Su Valid Gutters [function]"] [data-test="Fluid"] .assert-equal {
  -result: PASS;
  -description: "A unitless number is a valid setting for gutters"; }

/* Static */
[data-module="Su Valid Gutters [function]"] [data-test="Static"] .assert-equal {
  -result: PASS;
  -description: "Any length is a valid setting for gutters on a static grid"; }

/* Static gutters, fluid grid */
[data-module="Su Valid Gutters [function]"] [data-test="Static gutters, fluid grid"] .assert-equal {
  -result: PASS;
  -description: "Static gutters are allowed on a fluid grid"; }

/* # Su Valid Spread [function] ---------- */
/* Numeric spread */
[data-module="Su Valid Spread [function]"] [data-test="Numeric spread"] .assert-equal {
  -result: PASS;
  -description: "Valid number is returned directly"; }

/* # Su Valid Location [function] ---------- */
/* Numeric column position */
[data-module="Su Valid Location [function]"] [data-test="Numeric column position"] .assert-equal {
  -result: PASS;
  -description: "Valid position returns unchanged"; }

/* # Susy Parse [function] ---------- */
/* Simple grid span */
[data-module="Susy Parse [function]"] [data-test="Simple grid span"] .assert-equal {
  -result: PASS;
  -description: "A single unitless number is returned as span only"; }

/* Span with symmetrical columns */
[data-module="Susy Parse [function]"] [data-test="Span with symmetrical columns"] .assert-equal {
  -result: PASS;
  -description: "Span and symmetrical columns are properly mapped"; }

/* Span with spread */
[data-module="Susy Parse [function]"] [data-test="Span with spread"] .assert-equal {
  -result: PASS;
  -description: "Span and spread are properly mapped"; }

/* Span with location and asymmetrical columns */
[data-module="Susy Parse [function]"] [data-test="Span with location and asymmetrical columns"] .assert-equal {
  -result: PASS;
  -description: "Span, location, and asymmetrical columns are properly mapped"; }

/* Span with keyword location */
[data-module="Susy Parse [function]"] [data-test="Span with keyword location"] .assert-equal {
  -result: PASS;
  -description: "Span, keyword location, and columns are properly mapped"; }

/* Span all */
[data-module="Susy Parse [function]"] [data-test="Span all"] .assert-equal {
  -result: PASS;
  -description: 'Span "all" is properly mapped'; }

/* Span with column-width */
[data-module="Susy Parse [function]"] [data-test="Span with column-width"] .assert-equal {
  -result: PASS;
  -description: "Span with column-width is properly mapped"; }

/* Columns with column-width */
[data-module="Susy Parse [function]"] [data-test="Columns with column-width"] .assert-equal {
  -result: PASS;
  -description: "Columns with column-width is properly mapped"; }

/* Container-spread */
[data-module="Susy Parse [function]"] [data-test="Container-spread"] .assert-equal {
  -result: PASS;
  -description: "Container-spread is properly mapped"; }

/* Explicit asymmetrical span */
[data-module="Susy Parse [function]"] [data-test="Explicit asymmetrical span"] .assert-equal {
  -result: PASS;
  -description: "Explicit asymmetrical span is parsed properly"; }

/* # Susy Normalize [function] ---------- */
/* All values */
[data-module="Susy Normalize [function]"] [data-test="All values"] .assert-equal {
  -result: PASS;
  -description: ""; }

/* # Susy Normalize Columns [function] ---------- */
/* Fluid shorthand */
[data-module="Susy Normalize Columns [function]"] [data-test="Fluid shorthand"] .assert-equal {
  -result: PASS;
  -description: "Fluid shorthand is converted to longform column description."; }

/* Static shorthand */
[data-module="Susy Normalize Columns [function]"] [data-test="Static shorthand"] .assert-equal {
  -result: PASS;
  -description: "Static shorthand is converted to longform column description."; }

/* Longhand */
[data-module="Susy Normalize Columns [function]"] [data-test="Longhand"] .assert-equal {
  -result: PASS;
  -description: "Longhand is passed through without changes."; }

/* # Susy Normalize Span [funtion] ---------- */
/* Keyword span */
[data-module="Susy Normalize Span [funtion]"] [data-test="Keyword span"] .assert-equal {
  -result: PASS;
  -description: ""; }

/* Shorthand span */
[data-module="Susy Normalize Span [funtion]"] [data-test="Shorthand span"] .assert-equal {
  -result: PASS;
  -description: ""; }

/* # Susy Normalize Spread [function] ---------- */
/* Keyword spread */
[data-module="Susy Normalize Spread [function]"] [data-test="Keyword spread"] .assert-equal {
  -result: PASS;
  -description: "Keyword is converted to a number for grid-math"; }

/* Numeric spread */
[data-module="Susy Normalize Spread [function]"] [data-test="Numeric spread"] .assert-equal {
  -result: PASS;
  -description: "Number is returned directly"; }

/* # Susy Normalize Location [function] ---------- */
/* Numeric column position */
[data-module="Susy Normalize Location [function]"] [data-test="Numeric column position"] .assert-equal {
  -result: PASS;
  -description: "Valid position returns unchanged"; }

/* Initial position keyword */
[data-module="Susy Normalize Location [function]"] [data-test="Initial position keyword"] .assert-equal {
  -result: PASS;
  -description: "Valid initial keyword returns 1"; }

/* Final position keyword */
[data-module="Susy Normalize Location [function]"] [data-test="Final position keyword"] .assert-equal {
  -result: PASS;
  -description: "Final keyword returns calculated position from end"; }

/* # Susy Span [function] ---------- */
/* Simple span */
[data-module="Susy Span [function]"] [data-test="Simple span"] .assert-equal {
  -result: PASS;
  -description: "Simple span is calculated correctly using defaults"; }

/* Span with location */
[data-module="Susy Span [function]"] [data-test="Span with location"] .assert-equal {
  -result: PASS;
  -description: "Span with location is calculated correctly using column defaults"; }

/* Static math */
[data-module="Susy Span [function]"] [data-test="Static math"] .assert-equal {
  -result: PASS;
  -description: "Static math returns length based on column-width"; }

/* Span with spread */
[data-module="Susy Span [function]"] [data-test="Span with spread"] .assert-equal {
  -result: PASS;
  -description: "Spread adds gutter width to usual span"; }

/* Explicit span */
[data-module="Susy Span [function]"] [data-test="Explicit span"] .assert-equal {
  -result: PASS;
  -description: "Span accepts explicit columns"; }

/* # Susy Gutter [function] ---------- */
/* Fluid gutters */
[data-module="Susy Gutter [function]"] [data-test="Fluid gutters"] .assert-equal {
  -result: PASS;
  -description: "Gutters are calculated as a percentage of context"; }

/* Nested gutters */
[data-module="Susy Gutter [function]"] [data-test="Nested gutters"] .assert-equal {
  -result: PASS;
  -description: "Gutters are calculated as a percentage of context"; }

/* Static gutters */
[data-module="Susy Gutter [function]"] [data-test="Static gutters"] .assert-equal {
  -result: PASS;
  -description: "Static gutters are returned directly"; }

/* Gutters with custom config */
[data-module="Susy Gutter [function]"] [data-test="Gutters with custom config"] .assert-equal {
  -result: PASS;
  -description: "Gutters account for custom configuration"; }

/* # Susy slice [function] ---------- */
/* Numerical slicing */
[data-module="Susy slice [function]"] [data-test="Numerical slicing"] .assert-equal {
  -result: PASS;
  -description: "Returns a sub-slice of columns"; }

/* Keyword slicing */
[data-module="Susy slice [function]"] [data-test="Keyword slicing"] .assert-equal {
  -result: PASS;
  -description: "Returns a keyword-slice of columns"; }

/* # Unprefix ---------- */
/* Span */
[data-module="Unprefix"] [data-test="Span"] .assert-equal {
  -result: PASS;
  -description: "Unprefixed span() returns same result as susy-span()"; }

/* Gutter */
[data-module="Unprefix"] [data-test="Gutter"] .assert-equal {
  -result: PASS;
  -description: "Unprefixed gutter() returns same result as susy-gutter()"; }

/* Slice */
[data-module="Unprefix"] [data-test="Slice"] .assert-equal {
  -result: PASS;
  -description: "Unprefixed slice() returns same result as susy-slice()"; }

/* # Susy Validate SVG Units [function] ---------- */
/* Success */
[data-module="Susy Validate SVG Units [function]"] [data-test="Success"] .assert-equal {
  -result: PASS;
  -description: "Ems are a valid unit for SVG"; }

/* # SUMMARY ---------- */
/* 63 Tests: */
/*  - 63 Passed */
/*  - 0 Failed */
/* -------------------- */

/*# sourceMappingURL=test.css.map */
