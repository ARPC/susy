// Su Validation Tests
// ===================


// Valid Span
// ----------
@include test-module('Su Valid Span [function]') {
  @include test('Arbitrary span') {
    @include assert-equal(
      su-valid-span(4),
      4,
      'A unitless span is valid');
  }

  @include test('Explicit span') {
    @include assert-equal(
      su-valid-span(200mm),
      200mm,
      'A united length is valid');
  }

  @include test('Explicit list of columns') {
    $list: 8em 6em 4em;

    @include assert-equal(
      su-valid-span($list),
      $list,
      'A list of comparable columns is valid');
  }

  @include test('Mismatched list') {
    $list: 1px 2 4em 3;
    @include assert-equal(
      su-valid-span($list),
      $list);
  }

  @include test('Single-item unitless explicit list') {
    $list: (2);
    @include assert-equal(
      su-valid-span($list),
      $list);
  }

  @include test('Unknown type error') {
    @include assert-equal(
      su-valid-span(blue),
      'ERROR [su-valid-span] [color] `blue` is not a valid number, length, or column-list for $span.');
  }
}


// Valid Columns
// -------------
@include test-module('Su Valid Columns [function]') {
  @include test('Fluid columns') {
    @include assert-equal(
      su-valid-columns(1 2 4 2),
      1 2 4 2);
  }

  @include test('No single columns') {
    @include assert-equal(
      su-valid-columns(4, 'silent-fail'),
      null,
      'Has no units');

    @include assert-equal(
      su-valid-columns(20em, 'silent-fail'),
      null,
      'Has units');
  }

  @include test('Static columns') {
    @include assert-equal(
      su-valid-columns(10cm 200mm 45cm 230mm),
      10cm 200mm 45cm 230mm);
  }

  @include test('Mismatched units') {
    $list: 1px 2 4em 3;
    @include assert-equal(
      su-valid-columns($list),
      $list);
  }

  @include test('Silent failure') {
    @include assert-equal(
      su-valid-columns('hello world', 'silent-failure'),
      null);
  }

  @include test('Mismatched unitless') {
    $list: 1 2 4em 3;
    @include assert-equal(
      su-valid-columns($list),
      $list);

    $list: 1em 2 4em 3;

    @include assert-equal(
      su-valid-columns($list),
      $list);
  }
}


// Valid Gutters
// -------------
@include test-module('Su Valid Gutters [function]') {
  @include test('Fluid') {
    @include assert-equal(
      su-valid-gutters(0.75),
      0.75,
      'A unitless number is a valid setting for gutters');
  }

  @include test('Static') {
    @include assert-equal(
      su-valid-gutters(3cm),
      3cm,
      'Any length is a valid setting for gutters');
  }

  @include test('Invalid gutters error') {
    @include assert-equal(
      su-valid-gutters('wtf'),
      'ERROR [su-valid-gutters] [string] `#{inspect("wtf")}` is not a number or length for $gutters.')
  }
}


// Valid Spread
// ------------
@include test-module('Su Valid Spread [function]') {
  @include test('Numeric spread') {
    @include assert-equal(
      su-valid-spread(-1),
      -1,
      'Valid number is returned directly');
  }

  @include test('Unknown spread error') {
    @include assert-equal(
      su-valid-spread(4),
      'ERROR [su-valid-spread] [number] `4` is not a normalized [0 | 1 | -1] value for `$spread`.');
  }
}


// Valid Location
// --------------
@include test-module('Su Valid Location [function]') {
  @include test('Numeric column position') {
    @include assert-equal(
      su-valid-location(2, 3, 1 2 3 5 8),
      3,
      'Valid position returns unchanged');
  }

  @include test('Location units error') {
    @include assert-equal(
      su-valid-location(2, 3em, 1 2 3 5 8),
      'ERROR [su-valid-location] [number] `3em` is not a unitless number for $location.');
  }

  @include test('Location floating-point error') {
    @include assert-equal(
      su-valid-location(2, 3.5, 1 2 3 5 8),
      'ERROR [su-valid-location] Location (`3.5`) must be a 1-indexed intiger position.');
  }

  @include test('Location off-grid error') {
    @include assert-equal(
      su-valid-location(2, 8, 1 2 3 5 8),
      'ERROR [su-valid-location] Position `8` does not exist in grid `1 2 3 5 8`.');

    @include assert-equal(
      su-valid-location(2, -2, 1 2 3 5 8),
      'ERROR [su-valid-location] Position `-2` does not exist in grid `1 2 3 5 8`.');
  }

  @include test('Location/span combination error') {
    @include assert-equal(
      su-valid-location(6, 3, 1 2 3 5 8),
      'ERROR [su-valid-location] There are not enough columns in grid `1 2 3 5 8` for span `6` at `3`.');
  }
}


// Is Comparable
// -------------
@include test-module('Su Is Comparable [function]') {
  @include test('Fully fluid') {
    @include assert-equal(
      su-is-comparable(0.5, 1, 2, 4, 2),
      'fluid');
  }

  @include test('Comparable static') {
    @include assert-equal(
      su-is-comparable(10px, 3px, 2in, 33cm),
      'static');
  }

  @include test('Mixed fluid-static') {
    @include assert-false(
      su-is-comparable(10px, 3, 2in, 33cm));
  }

  @include test('Non-comparable static') {
    @include assert-false(
      su-is-comparable(10px, 3rem, 2in, 33cm));
  }
}


// Needs Calc
// ----------
@include test-module('Su Needs Calc [function]') {
  @include test('Fully fluid') {
    @include assert-false(
      su-needs-calc(1 2 4 2, 1 2 4 2 6 8, 0.5));
  }

  @include test('Fully static') {
    $span: 10cm 200mm 45cm 230mm;
    $columns: 10cm 200mm 45cm 230mm 25px;

    @include assert-false(
      su-needs-calc($span, $columns, 2cm));
  }

  @include test('Static span and gutters') {
    $span: 10cm 200mm 45cm 230mm;
    $columns: 10cm 200mm 4 2 25em;

    @include assert-false(
      su-needs-calc($span, $columns, 2cm));
  }

  @include test('Mismatched span units (complex)') {
    $span: 1px 2 4em 3;
    $columns: 100px 200px 400px 300px 250px;

    @include assert-true(
      su-needs-calc($span, $columns, 10px));
  }

  @include test('Mismatched span units (simple)') {
    $span: 1 2 4em 3;
    $columns: 1 2 4em 3 10em;

    @include assert-true(
      su-needs-calc($span, $columns, 0.25));

    @include assert-true(
      su-needs-calc($span, $columns, 0.25em));
  }

  @include test('Mismatched gutter units') {
    $span: 1em 2em 4em 3em;
    $columns: 1em 2em 4em 3em 10em;

    @include assert-true(
      su-needs-calc($span, $columns, 10px));
  }

  @include test('Fluid span and gutters, mixed columns') {
    $span: 1 2 4 3;
    $columns: 1 2 4 3 10em;

    @include assert-true(
      su-needs-calc($span, $columns, 0.25));
  }

  @include test('Single span, mixed columns and gutters') {
    $span: (40pt,);
    $columns: 1 2 40pt 3 10em;

    @include assert-false(
      su-needs-calc($span, $columns, 0.25));
  }
}
