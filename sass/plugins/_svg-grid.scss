// SVG Grid background
// ===================



// SVG Validate Units
// ------------------
/// @access private
@function _susy-svg-validate-units(
  $length,
  $name: null
) {
  $_svg-units: 'em', 'ex', 'px', 'pt', 'pc', 'cm', 'mm', 'in', '%';

  @if index($_svg-units, unit($length)) {
    @return $length;
  }

  @error '"#{unit($length)}" #{$name} units are not supported in SVG';
}



// SVG Rect
// --------
/// @access private
@function _susy-svg-rect(
  $x,
  $width,
  $offset: null
) {
  $width: _susy-svg-validate-units($width);
  $offset: if($offset == 0, null, $offset);

  @if $offset and comparable($x, $offset) {
    $x: $x + $offset;
    $offset: null;
  } @else if $offset {
    $offset: 'style="transform:translateX(#{$offset})"';
  }

  @return '%3Crect x="#{$x}" width="#{$width}" height="100%" #{$offset}/%3E';
}



// SVG Color
// ---------
/// @access private
@function _susy-svg-color(
  $color
) {
  $color: inspect($color); // convert to string

  @if (str-index($color, '#') == 1) {
    $color: '%23' + str-slice($color, 2);
  }

  @return $color;
}



// SVG Offset
// ----------
/// @access private
@function _susy-svg-offset(
  $grid
) {
  $columns: nth(map-get($grid, 'columns'), 1);
  $gutters: map-get($grid, 'gutters');

  $comparable: comparable($columns, $gutters);
  $flex-columns: unitless($columns) and not unitless($gutters);
  $flex-gutters: unitless($gutters) and not unitless($columns);

  @if ($flex-columns) or ($flex-gutters) or (not $comparable) {
    @return null;
  }

  $container: map-get($grid, 'container-spread');
  $span: map-get($grid, 'spread');
  $extra: $container - $span;

  @if $extra == 0 {
    @return null;
  }

  @return $extra * susy-gutter($config: $grid) / 2;
}



// SVG Column Position
// -------------------
/// @access private
@function _susy-svg-column-position(
  $column,
  $grid
) {
  $x: $column - 1;

  @if ($x > 0) {
    $x: susy-span(first $x wide, $grid);
  }

  @return $x;
}



// SVG Gradient
// ------------
/// @access private
@function _susy-svg-gradient(
  $colors
) {
  $gradient: '%3Cdefs%3E%3ClinearGradient spreadMethod="pad" id="svg-gradient"';
  $gradient: '#{$gradient} x1="0%" y1="0%" x2="100%" y2="0%"%3E';

  @for $i from 1 through length($colors) {
    $color: _susy-svg-color(nth($colors, $i));
    $offset: percentage(($i - 1) / (length($colors) - 1));
    $stop: '%3Cstop offset="#{$offset}" style="stop-color:#{$color};" /%3E';

    $gradient: $gradient + $stop;
  }

  @return $gradient + '%3C/linearGradient%3E%3C/defs%3E';
}


// SVG Grid
// --------
/// Return inline svg to display the grid.
/// @group plugins
@function susy-svg-grid(
  $grid: $susy,
  $colors: hsla(120, 50%, 50%, 0.5),
  $offset: null
) {
  $grid: susy-settings($grid);
  $grid: susy-normalize($grid);

  $color: nth($colors, 1);
  $gradient: '';

  @if length($colors) > 1 {
    $gradient: _susy-svg-gradient($colors);
    $color: 'url(%23svg-gradient)';
  } @else {
    $color: _susy-svg-color($color);
  }

  $columns: map-get($grid, 'columns');
  $offset: $offset or _susy-svg-offset($grid);

  $svg: 'data:image/svg+xml;charset=utf8,';
  $svg: $svg + '%3Csvg xmlns="http://www.w3.org/2000/svg" fill="#{$color}" %3E';
  $svg: $svg + $gradient;

  @for $column from 1 through length($columns) {
    $width: susy-span(1 at $column, $grid);
    $x: _susy-svg-column-position($column, $grid);

    $svg: $svg + _susy-svg-rect($x, $width, $offset);
  }

  @return $svg + '%3C/svg%3E';
}

// $susy: (
//   'gutters': 1rem,
//   'container-spread': 'wider',
// );

@debug susy-svg-grid();
