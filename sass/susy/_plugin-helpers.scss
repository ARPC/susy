// Plugin Helpers
// ==============
// - susy-compile [function]
// - susy-call [function]



// Compile
// -------
/// Combines parsed shorthand
/// with local and global config,
/// normalizing the results
/// into a standard Susy settings map.
///
/// @group x--plugin-helpers
///
/// @param {list | map} $shorthand -
///   Shorthand expression to define the width of the span,
///   optionally containing:
///   - a count, length, or column-list span;
///   - `at $n`, `first`, or `last` location on asymmetrical grids;
///   - `narrow`, `wide`, or `wider` for optionally spreading
///     across adjacent gutters;
///   - `of $n <spread>` for available grid columns
///     and spread of the container;
///   - and `set-gutters $n` to override
///     global gutter settings
/// @param {map} $config [null] -
///   Optional map of Susy grid configuration settings
/// @param {bool} $context-only [false] -
///   Allow the parser to ignore span and span-spread values,
///   only parsing context and container-spread
///
/// @return {map} -
///   Parsed and normalized map of settings,
///   based on global and local configuration,
///   alongwith shorthad adjustments.
///
/// @example scss -
///   $user-input: 3 wide of susy-repeat(6, 120px) set-gutters 10px;
///   $grid-data: susy-compile($user-input, $susy);
///
///   @each $key, $value in $grid-data {
///     /* #{$key}: #{$value}, */
///   }
@function susy-compile(
  $short,
  $config: null,
  $context-only: false
) {
  $config: $config or ();

  @if (type-of($short) != 'map') and (length($short) > 0) {
    $short: susy-parse($short, $context-only);
  }

  $merge: susy-settings($config, $short);
  $normal: susy-normalize($merge);

  @return $normal;
}



// Call
// ----
/// Call a grid-math function
/// using the approapriate arguments
/// from the passed-in data.
///
/// @group x--plugin-helpers
///
/// @param {string} $name -
///   Name of the `su-` function to call
/// @param {map} $config -
///   Map of Susy configuration settings to use as needed for arguments
///
/// @return {*} -
///   Results of the called function
///
/// @example scss -
///   $user-input: 3 wide of susy-repeat(6, 120px) set-gutters 10px;
///   $grid-data: susy-compile($user-input, $susy);
///   .su-span {
///     width: susy-call('su-span', $grid-data);
///   }
@function susy-call(
  $name,
  $config
) {
  $grid-function-args: (
    'su-span': ('span', 'columns', 'gutters', 'spread', 'container-spread', 'location' ),
    'su-gutter': ('columns', 'gutters', 'container-spread'),
    'su-slice': ('span', 'columns', 'location'),
    'su-sum': ('columns', 'gutters', 'spread'),
  );

  $args: map-get($grid-function-args, $name);
  $call: if(function-exists('get-function'), get-function($name), $name);
  $output: ();

  @each $arg in $args {
    $value: map-get($config, $arg);
    $output: if($value, map-merge($output, ($arg: $value)), $output);
  }

  @return call($call, $output...);
}
