// Settings
// ========
// - susy [variable]
// - susy-defaults [variable]
// - susy-settings [function]
// - susy-get [function]



// Susy
// ----
/// Custom user configuration map for Susy
///
/// @group a-config
///
/// @type Map
///
/// @see $_susy-defaults
/// @see {function} susy-repeat
///
/// @prop {list} columns -
///   Description of the columns in a grid,
///   and their realtive sizes if asymmetrical.
///   The syntax is a simplified version of CSS native
///   [grid-template-columns](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns),
///   expecting a list of grid-column widths.
///   - Use the `susy-repeat($count, $value)` function
///     to repetative columns, similar to CSS-native `repeat()`
///   - Use unitless numbers in place of `fr` units
/// @prop {number} gutters -
///   Ratio of a gutter to a column,
///   or static width of a single gutter
/// @prop {string} spread -
///   Spread of an element across adjacent gutters:
///   either `narrow` (none), `wide` (one), or `wider` (two)
/// @prop {string} container-spread -
///   Spread of a container around adjacent gutters:
///   either `narrow` (none), `wide` (one), or `wider` (two)
///
/// @example scss - All available options (to their default value)
///   $susy: (
///     'columns': susy-repeat(4),
///     'gutters': 0.25,
///     'spread': 'narrow',
///     'container-spread': 'narrow',
///   );
$susy: () !default;



// Repeat
// ------
/// Similar to the `repeat(<count>, <value>)` function
/// that is available in native CSS Grid templates,
/// repeats any value a given number of times â€”
/// a useful shortcut for defining symetrical static grids
///
/// @group a-config
/// @link
///   https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns
///   CSS grid-template-columns property
///
/// @param {integer} $count -
///   The number of repetitions
/// @param {*} $value [1] -
///   Any value to be repeated
///
/// @return {list} -
///   List of repeated values
///
/// @example scss
///   // 12 column grid, with 5em columns
///   $susy: (
///     columns: susy-repeat(12, 5em),
///   );
///
/// @example scss
///   // asymmetrical 5-column grid
///   $susy: (
///     columns: 20px susy-repeat(3, 100px) 20px,
///   );
@function susy-repeat(
  $count,
  $value: 1
) {
  $return: ();

  @for $i from 1 through $count {
    $return: join($return, $value);
  }

  @return $return;
}



// Susy Defaults
// -------------
/// Configuration map of Susy factory defaults
///
/// @access private
///
/// @type Map
///
/// @prop {number | list} columns [susy-repeat(4)]
/// @prop {number} gutters [0.25]
/// @prop {string} spread ['narrow']
/// @prop {string} container-spread ['narrow']
$_susy-defaults: (
  'columns': susy-repeat(4),
  'gutters': 0.25,
  'spread': 'narrow',
  'container-spread': 'narrow',
);



// Susy Settings
// -------------
/// Return a combined map of Susy settings
///
/// @group a-config
///
/// @param {map | arglist} $overrides... -
///   Optional map override of global configuration settings
///
/// @return {map} -
///   Combined map of Susy configuration settings, in order of specificity:
///   `$overrides...`, `$susy`, then `$_susy-defaults`
@function susy-settings(
  $overrides...
) {
  $settings: map-merge($_susy-defaults, $susy);

  @each $config in $overrides {
    $settings: map-merge($settings, $config);
  }

  @return $settings;
}



// Susy Get
// --------
/// Return the current value of any Susy setting
///
/// @group a-config
///
/// @param {string} $key -
///   Setting to retrieve from the configuration
///
/// @return {*} -
///   Value mapped to `$key` in the configuration maps, in order of specificity:
///   `$susy`, then `$_susy-defaults`
@function susy-get(
  $key
) {
  $settings: susy-settings();

  @if not map-has-key($settings, $key) {
    @return _susy-error(
      'There is no Susy setting called `#{$key}`',
      'susy-get');
  }

  @return map-get($settings, $key);
}
